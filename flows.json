[
    {
        "id": "02028ef19d861d4d",
        "type": "tab",
        "label": "Build BI Tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a67ed6b61499d55d",
        "type": "tab",
        "label": "Project Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bcf9f3ab3616eee4",
        "type": "tab",
        "label": "Buildings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5aef4fc5ed2691d4",
        "type": "tab",
        "label": "Equipment to Building",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ca30e93108932849",
        "type": "tab",
        "label": "Floors",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c1515409031d41c3",
        "type": "tab",
        "label": "Equipment to Floors",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7c9c4bac381bee44",
        "type": "tab",
        "label": "Spaces",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1967a61058fdb511",
        "type": "tab",
        "label": "Equpment to Spaces",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7da51f1cf2747c71",
        "type": "tab",
        "label": "BACNet Devices",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "33cf6bb92a970f36",
        "type": "tab",
        "label": "BACNet Points",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8441b3d7.96e368",
        "type": "subflow",
        "name": "Azure Bearer Token",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a4d8e53e.ea1db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 80,
                "wires": [
                    {
                        "id": "610bfef1.2afef",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tenant_ID",
                "type": "str",
                "value": ""
            },
            {
                "name": "client_ID",
                "type": "str",
                "value": ""
            },
            {
                "name": "client_Secret",
                "type": "str",
                "value": ""
            },
            {
                "name": "scope",
                "type": "str",
                "value": ""
            }
        ],
        "color": "#C7E9C0",
        "inputLabels": [
            "Trigger"
        ],
        "outputLabels": [
            "Token"
        ]
    },
    {
        "id": "cc1ea0d4.03ac8",
        "type": "subflow",
        "name": "Exception Sync v2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "d08a97a8.e9389"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 60,
                "wires": [
                    {
                        "id": "696be0aa.bc2fc",
                        "port": 0
                    },
                    {
                        "id": "d08a97a8.e9389",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "connectionType",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-chain-broken",
                    "label": {
                        "en-US": "Connection Type"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Azure IOT Hub"
                                },
                                "v": "Azure"
                            },
                            {
                                "l": {
                                    "en-US": "Direct Connection"
                                },
                                "v": "Local"
                            }
                        ]
                    }
                }
            },
            {
                "name": "schedule_Num",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-calendar-o",
                    "label": {
                        "en-US": "Schedule Number"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "username",
                "type": "str",
                "value": "admin:realm1-Stinger@1",
                "ui": {
                    "label": {
                        "en-US": "Username (Direct)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "password",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock",
                    "label": {
                        "en-US": "Password (Direct)"
                    }
                }
            },
            {
                "name": "scheme",
                "type": "str",
                "value": "http",
                "ui": {
                    "label": {
                        "en-US": "Scheme (Direct)"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Secure (HTTPS)"
                                },
                                "v": "https"
                            },
                            {
                                "l": {
                                    "en-US": "Unsecure (HTTP)"
                                },
                                "v": "http"
                            }
                        ]
                    }
                }
            },
            {
                "name": "ip",
                "type": "str",
                "value": "10.222.103.52",
                "ui": {
                    "label": {
                        "en-US": "IP Address (Direct)"
                    }
                }
            },
            {
                "name": "port",
                "type": "str",
                "value": "80",
                "ui": {
                    "label": {
                        "en-US": "Port (Direct)"
                    }
                }
            },
            {
                "name": "iot_Website",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Website (IOT)"
                    }
                }
            },
            {
                "name": "iot_Device_ID",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Device ID (IOT)"
                    }
                }
            }
        ],
        "meta": {},
        "color": "#D8BFD8",
        "inputLabels": [
            "iCal JSON"
        ],
        "icon": "node-red-contrib-ical-events/calendar.png"
    },
    {
        "id": "b2321d7e94e56d07",
        "type": "subflow",
        "name": "Shelly 2 PM Pro/Plus to Ecylpse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 140,
                "wires": [
                    {
                        "id": "7964c5e6495db9b5"
                    },
                    {
                        "id": "0de394d0aa63050c"
                    },
                    {
                        "id": "bde9c0e7d87c1cdc"
                    },
                    {
                        "id": "429878952a0ba26e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 890,
                "y": 160,
                "wires": [
                    {
                        "id": "7964c5e6495db9b5",
                        "port": 0
                    },
                    {
                        "id": "230d6f916ba1df1b",
                        "port": 0
                    },
                    {
                        "id": "bde9c0e7d87c1cdc",
                        "port": 0
                    },
                    {
                        "id": "bfcca562e32e21c3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Objects"
        ],
        "outputLabels": [
            "ECY POST"
        ]
    },
    {
        "id": "144652240b7173dd",
        "type": "subflow",
        "name": "Shelly 1 PM Pro/Plus to Ecylpse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 200,
                "wires": [
                    {
                        "id": "c170104bf1134a59"
                    },
                    {
                        "id": "71db946e42b39583"
                    },
                    {
                        "id": "709f6d883a83db40"
                    },
                    {
                        "id": "2a5a9305560168d3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 870,
                "y": 180,
                "wires": [
                    {
                        "id": "c170104bf1134a59",
                        "port": 0
                    },
                    {
                        "id": "bec19f7921eb092a",
                        "port": 0
                    },
                    {
                        "id": "709f6d883a83db40",
                        "port": 0
                    },
                    {
                        "id": "301a8183f49bf527",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Objects"
        ],
        "outputLabels": [
            "ECY POST"
        ]
    },
    {
        "id": "9ecb547ff55f14e6",
        "type": "subflow",
        "name": "Shelly Plug Plus to Eclypse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 100,
                "wires": [
                    {
                        "id": "b1ee353b0839d72d"
                    },
                    {
                        "id": "073af22bf1c52090"
                    },
                    {
                        "id": "df68f18f08e62c31"
                    },
                    {
                        "id": "4e761c2773120a55"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 950,
                "y": 80,
                "wires": [
                    {
                        "id": "b1ee353b0839d72d",
                        "port": 0
                    },
                    {
                        "id": "77c4e0afd96c7dac",
                        "port": 0
                    },
                    {
                        "id": "df68f18f08e62c31",
                        "port": 0
                    },
                    {
                        "id": "620beee5215c495c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Input"
        ],
        "outputLabels": [
            "ECY POST"
        ]
    },
    {
        "id": "d228d85b72298a22",
        "type": "subflow",
        "name": "Shelly 2 PM Gen-1 to Eclypse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 220,
                "wires": [
                    {
                        "id": "50f089557f4f60fc"
                    },
                    {
                        "id": "2eedca3ce567b21a"
                    },
                    {
                        "id": "b531ebe87cbaddd1"
                    },
                    {
                        "id": "1e65c60cb1aa239e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 850,
                "y": 160,
                "wires": [
                    {
                        "id": "50f089557f4f60fc",
                        "port": 0
                    },
                    {
                        "id": "8a0b29f79ee62434",
                        "port": 0
                    },
                    {
                        "id": "b531ebe87cbaddd1",
                        "port": 0
                    },
                    {
                        "id": "0251678586dd3538",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Input"
        ],
        "outputLabels": [
            "ECY POST"
        ]
    },
    {
        "id": "76bc45b0a8771bee",
        "type": "subflow",
        "name": "Shelly 1 PM Gen - 1 to Eclypse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 100,
                "wires": [
                    {
                        "id": "702313fcb87a051f"
                    },
                    {
                        "id": "e981e75f316a74f2"
                    },
                    {
                        "id": "df01a128d162f208"
                    },
                    {
                        "id": "bc49893ca82f0f77"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 930,
                "y": 100,
                "wires": [
                    {
                        "id": "702313fcb87a051f",
                        "port": 0
                    },
                    {
                        "id": "1b6b7c49a7f93273",
                        "port": 0
                    },
                    {
                        "id": "df01a128d162f208",
                        "port": 0
                    },
                    {
                        "id": "fd14bfa4affe782d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Input"
        ],
        "outputLabels": [
            "ECY POST"
        ]
    },
    {
        "id": "4f6b87ae.7d3bb",
        "type": "subflow",
        "name": "List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "cf0b484b.b70c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "13486428.bcfc4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ]
    },
    {
        "id": "d6710af138f21a36",
        "type": "junction",
        "z": "b2321d7e94e56d07",
        "x": 304,
        "y": 142,
        "wires": [
            []
        ]
    },
    {
        "id": "ce79c16d90c54ca9",
        "type": "junction",
        "z": "144652240b7173dd",
        "x": 264,
        "y": 162,
        "wires": [
            []
        ]
    },
    {
        "id": "a408cdf0867a808f",
        "type": "junction",
        "z": "9ecb547ff55f14e6",
        "x": 304,
        "y": 102,
        "wires": [
            []
        ]
    },
    {
        "id": "b27796fb1fd9b454",
        "type": "junction",
        "z": "d228d85b72298a22",
        "x": 244,
        "y": 162,
        "wires": [
            []
        ]
    },
    {
        "id": "bbbe4a0d136c7d43",
        "type": "junction",
        "z": "76bc45b0a8771bee",
        "x": 304,
        "y": 102,
        "wires": [
            []
        ]
    },
    {
        "id": "f63e1c3c9b6cdfd5",
        "type": "junction",
        "z": "33cf6bb92a970f36",
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "cd7424b3bff7ad5d"
            ]
        ]
    },
    {
        "id": "ec715d09b2e74925",
        "type": "junction",
        "z": "bcf9f3ab3616eee4",
        "x": 1140,
        "y": 100,
        "wires": [
            [
                "78ab945fb4fba659"
            ]
        ]
    },
    {
        "id": "61ebc657f7c6ebfc",
        "type": "junction",
        "z": "5aef4fc5ed2691d4",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "39e05c03684caaa3"
            ]
        ]
    },
    {
        "id": "8ee91f0e6ba9b10b",
        "type": "junction",
        "z": "ca30e93108932849",
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "f711822fb11f90b8"
            ]
        ]
    },
    {
        "id": "1f6b5d674d04b4bf",
        "type": "junction",
        "z": "c1515409031d41c3",
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "39402b06ea85e1f3"
            ]
        ]
    },
    {
        "id": "2e089059d3dcc786",
        "type": "junction",
        "z": "7c9c4bac381bee44",
        "x": 1140,
        "y": 140,
        "wires": [
            [
                "6ce689ec65ad2715"
            ]
        ]
    },
    {
        "id": "12c5523889ffe098",
        "type": "junction",
        "z": "1967a61058fdb511",
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "33f6a2fde5ea7944"
            ]
        ]
    },
    {
        "id": "b5d21ed921c72fa6",
        "type": "junction",
        "z": "7da51f1cf2747c71",
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "3e39d409b81ace48"
            ]
        ]
    },
    {
        "id": "bbc5e0df11aae2b4",
        "type": "junction",
        "z": "5aef4fc5ed2691d4",
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "8358c9af6508a04c"
            ]
        ]
    },
    {
        "id": "a890c041908a991d",
        "type": "junction",
        "z": "c1515409031d41c3",
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "0a484e00fda95fb8"
            ]
        ]
    },
    {
        "id": "1748baaf7d8b17e5",
        "type": "junction",
        "z": "1967a61058fdb511",
        "x": 1060,
        "y": 360,
        "wires": [
            [
                "120b2a925f4d1137"
            ]
        ]
    },
    {
        "id": "340fe7c22ea79570",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ECYAPEX-04BDFEAB-D4EE-5B06-84B9-CAEDDF768606 Root CA.pem",
        "servername": "ECLYPSE-A00331",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "c3113f583f745624",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#220e38",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#220e38",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#220e38",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#212121",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#feffff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#00a3da",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#220e38",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "BI Project Builder",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "16626ecc77847bf4",
        "type": "ui_tab",
        "name": "ECLYPSE Building Intelligence",
        "icon": "build",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b1014c0b16901d6f",
        "type": "ui_tab",
        "name": "Buildings",
        "icon": "mi-apartment",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1ed1c2eeefdb5600",
        "type": "ui_tab",
        "name": "Equipment to Spaces",
        "icon": "mi-construction",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "be3015a1c2b2b84f",
        "type": "ui_tab",
        "name": "BACNet Devices",
        "icon": "mi-add_to_queue",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "064077fb306a5bf4",
        "type": "ui_tab",
        "name": "BACNet Points",
        "icon": "mi-control_point_duplicate",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a2d797ca9c9ad7c5",
        "type": "ui_tab",
        "name": "Floors",
        "icon": "mi-foundation",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ac2771e3a6f3b96b",
        "type": "ui_tab",
        "name": "Spaces",
        "icon": "mi-meeting_room",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "79183c26796fab6b",
        "type": "ui_tab",
        "d": true,
        "name": "Equipment Connector Links",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2de4c9b9cb62e01d",
        "type": "ui_tab",
        "name": "BACNet Device Duplicate",
        "icon": "mi-dynamic_feed",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "90f94ccfd3a284c3",
        "type": "ui_tab",
        "name": "Equipment to Floors",
        "icon": "mi-construction",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "392794802a7236f2",
        "type": "ui_tab",
        "name": "Equipment to Buildings",
        "icon": "mi-construction",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "798f6acc339ea0c0",
        "type": "ui_group",
        "name": "BACNet Devices Form",
        "tab": "be3015a1c2b2b84f",
        "order": 2,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9eebbac2f9f9aab7",
        "type": "ui_group",
        "name": "BACNet Points Manual Form:",
        "tab": "064077fb306a5bf4",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15fa34f2f93321e0",
        "type": "ui_group",
        "name": "Building Information",
        "tab": "b1014c0b16901d6f",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "71c31779692d559d",
        "type": "ui_group",
        "name": "Floor Information",
        "tab": "a2d797ca9c9ad7c5",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "16f26594cc8ed88a",
        "type": "ui_group",
        "name": "Space Information",
        "tab": "ac2771e3a6f3b96b",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "5461ae2be997ad35",
        "type": "ui_group",
        "name": "Equipment to Spaces Information",
        "tab": "1ed1c2eeefdb5600",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "b4438a213cf74446",
        "type": "ui_group",
        "name": "BACNet Devices Table",
        "tab": "be3015a1c2b2b84f",
        "order": 4,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "404f70c1b4fca788",
        "type": "ui_group",
        "name": "Building Intelligence Settings",
        "tab": "16626ecc77847bf4",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d66e38329ea74f08",
        "type": "ui_group",
        "name": "BACNet Points Table",
        "tab": "064077fb306a5bf4",
        "order": 5,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3a899fd5b60429ec",
        "type": "ui_group",
        "name": "Buildings Table: Verify the information then hit \"Create Building\"",
        "tab": "b1014c0b16901d6f",
        "order": 4,
        "disp": true,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1172758832a43a4",
        "type": "ui_group",
        "name": "Floors Table",
        "tab": "a2d797ca9c9ad7c5",
        "order": 4,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c60ea1bdb0f8cba0",
        "type": "ui_group",
        "name": "Spaces Table",
        "tab": "ac2771e3a6f3b96b",
        "order": 4,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "131cb1262fa32f5e",
        "type": "ui_group",
        "name": "Equipment to Spaces Table",
        "tab": "1ed1c2eeefdb5600",
        "order": 6,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1eeab51532883ecc",
        "type": "ui_group",
        "name": "BACNet Duplicate Form",
        "tab": "2de4c9b9cb62e01d",
        "order": 1,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e81150a8478bfea6",
        "type": "ui_group",
        "name": "BACNet Duplicate Table",
        "tab": "2de4c9b9cb62e01d",
        "order": 2,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "61005177a1f4f1ba",
        "type": "ui_group",
        "name": "BACNet Device CSV Upload",
        "tab": "be3015a1c2b2b84f",
        "order": 3,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "256d6a4d3a1ca036",
        "type": "ui_group",
        "name": "BACNet Points CSV Upload",
        "tab": "064077fb306a5bf4",
        "order": 4,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fd884cfe4217ef4c",
        "type": "ui_group",
        "name": "Enter The Applicable Devices To Apply The Points To:",
        "tab": "064077fb306a5bf4",
        "order": 1,
        "disp": true,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d3663c5df3961225",
        "type": "ui_group",
        "name": "Building CSV Upload",
        "tab": "b1014c0b16901d6f",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "f195522f14542a1f",
        "type": "ui_group",
        "name": "Floor CSV Upload",
        "tab": "a2d797ca9c9ad7c5",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "bcb1a9124ce89791",
        "type": "ui_group",
        "name": "Space CSV Upload",
        "tab": "ac2771e3a6f3b96b",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "bc055bd9fc3bdac4",
        "type": "ui_group",
        "name": "Equipment to Floors Information",
        "tab": "90f94ccfd3a284c3",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "27c65a6bbe891ed2",
        "type": "ui_group",
        "name": "Equipment to Buildings Information",
        "tab": "392794802a7236f2",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2618ec148bee5326",
        "type": "ui_group",
        "name": "Equipment to Floors Table",
        "tab": "90f94ccfd3a284c3",
        "order": 6,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "770b05710b6db0bb",
        "type": "ui_group",
        "name": "Equipment to Buildings Table",
        "tab": "392794802a7236f2",
        "order": 6,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a320da1730fb737b",
        "type": "ui_group",
        "name": "Equipment to Spaces CSV Upload",
        "tab": "1ed1c2eeefdb5600",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "4d20caa342aa8170",
        "type": "ui_group",
        "name": "Equipment to Floor CSV Upload",
        "tab": "90f94ccfd3a284c3",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "09386473d7716117",
        "type": "ui_group",
        "name": "Equipment to Building CSV Upload",
        "tab": "392794802a7236f2",
        "order": 3,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "0e7cc617bc04a187",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Link",
        "tab": "392794802a7236f2",
        "order": 4,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "04878dc678804c5f",
        "type": "ui_group",
        "name": "BACNet Points to Equipment CSV Upload",
        "tab": "392794802a7236f2",
        "order": 5,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "394dd5c9e772b680",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Table",
        "tab": "392794802a7236f2",
        "order": 7,
        "disp": true,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dab525956888b053",
        "type": "ui_group",
        "name": "Bldg Text",
        "tab": "b1014c0b16901d6f",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ca58f85e97a49f3a",
        "type": "ui_group",
        "name": "Bldg to Eq Text",
        "tab": "392794802a7236f2",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9ef342a5c89b8217",
        "type": "ui_group",
        "name": "Floor text",
        "tab": "a2d797ca9c9ad7c5",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b768e4380b893b5",
        "type": "ui_group",
        "name": "Floor to Eq Text",
        "tab": "90f94ccfd3a284c3",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff5d80b13b3e6e4f",
        "type": "ui_group",
        "name": "Space Text",
        "tab": "ac2771e3a6f3b96b",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "aeebac2164898705",
        "type": "ui_group",
        "name": "Space to Eq Text",
        "tab": "1ed1c2eeefdb5600",
        "order": 1,
        "disp": false,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "594bd5844199797f",
        "type": "ui_spacer",
        "z": "7da51f1cf2747c71",
        "name": "spacer",
        "group": "b4438a213cf74446",
        "order": 2,
        "width": 26,
        "height": 1
    },
    {
        "id": "57e8190fe1eb0416",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Link",
        "tab": "90f94ccfd3a284c3",
        "order": 4,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0d2fcdbfba00c8ab",
        "type": "ui_group",
        "name": "BACNet Points to Equipment CSV Upload",
        "tab": "90f94ccfd3a284c3",
        "order": 5,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "189071b20f1c2f3c",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Table",
        "tab": "90f94ccfd3a284c3",
        "order": 7,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f0652ae5cad74bc3",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Link",
        "tab": "1ed1c2eeefdb5600",
        "order": 4,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7b53b20087cf053",
        "type": "ui_group",
        "name": "BACNet Points to Equipment Table",
        "tab": "1ed1c2eeefdb5600",
        "order": 7,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f9c6837ce20b5ba",
        "type": "ui_group",
        "name": "BACNet Points to Equipment CSV Upload",
        "tab": "1ed1c2eeefdb5600",
        "order": 5,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a4d8e53e.ea1db",
        "type": "function",
        "z": "8441b3d7.96e368",
        "name": "Bearer Token",
        "func": "\n// Variables ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nvar d_URL              = 'login.microsoftonline.com';                     //Azure Resource Address\nvar d_TID              = env.get('tenant_ID');                            //Azure TenantID\nvar client_ID          = env.get('client_ID');\nvar client_Secret      = env.get('client_Secret');\nvar scope              = env.get('scope');\n\n\n// REST Parameters ////////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.method                   = 'post';\nmsg.rejectUnauthorized       = false;\nmsg.headers                  = {};\nmsg.headers['Content-Type']  = 'application/x-www-form-urlencoded';\n\n\n// Body ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.payload = {};\nmsg.payload = {\n    'grant_type'    : 'client_credentials',\n    'client_id'     : (client_ID),\n    'client_secret' : (client_Secret),\n    'scope'         : (scope)+'/.default'\n};\n\n\n// Build REST URL /////////////////////////////////////////////////////////////////////////////////////////////////////////\nmsg.url = 'https://'+(d_URL)+'/'+(d_TID)+'/oauth2/v2.0/token';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "610bfef1.2afef"
            ]
        ]
    },
    {
        "id": "610bfef1.2afef",
        "type": "http request",
        "z": "8441b3d7.96e368",
        "name": "ECY Rest",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "696be0aa.bc2fc",
        "type": "http request",
        "z": "cc1ea0d4.03ac8",
        "name": "ECY Rest",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 480,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d5ffb629.cc1518",
        "type": "comment",
        "z": "cc1ea0d4.03ac8",
        "name": "String Return",
        "info": "",
        "x": 490,
        "y": 100,
        "wires": []
    },
    {
        "id": "d08a97a8.e9389",
        "type": "function",
        "z": "cc1ea0d4.03ac8",
        "name": "Schedule Exception",
        "func": "\n////////////////////////////////////////////////\n// Connection type: Azure or Local\n////////////////////////////////////////////////\nvar connectionType  = env.get('connectionType');\n\n\n//////////////////////////////////////////////////////////\n// IOT Variables\n//// Azure IOT Hub Website Hostname\n//// Azure Device ID\n//// Bearer Token\n//////////////////////////////////////////////////////////\nvar iot_Address   = env.get('iot_Website');                       \nvar iot_deviceID  = env.get('iot_Device_ID');\nvar iot_Token     = 'Bearer'+' '+flow.get('$parent.aztoken');\n\n\n///////////////////////////////////////////////////////////////////\n// Local Variables\n//// Scheme HTTP or HTTPS\n//// Local Port Typically 80 or 443\n//////////////////////////////////////////////////////////////////\nvar credentials     = env.get('username') + ':' + env.get('password');\nvar local_Scheme    = env.get('scheme');                    \nvar local_IP        = env.get('ip');\nvar local_Port      = env.get('port');\nvar base64          = new Buffer(credentials).toString('base64');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// General Variables\n////////////////////////////////////////////////////////////////////////////////\nvar schedule        = env.get('schedule_Num');\nvar local_Property  = 'schedule/' + schedule + '/properties/exception-schedule';\nvar local_Resource  = '/api/rest/v1/protocols/bacnet/local/objects/';\nvar calArray        = msg.payload;\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// \"for loop\" to Iterate Through Calendar Events\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfor (let i=0, il=calArray.length; i<il; i++) {\n\n    let {eventStart:c_ES, eventEnd:c_EE, allDay:c_AD, description:c_Des} = calArray[(i)];\n    [sYear, sHours, sMins, eYear, eHours, eMins] = [c_ES.getFullYear(), 0, 0, c_EE.getFullYear(), 0, 0];\n    [sMonth, sDay, eMonth, eDay] = [(c_ES.getMonth()+1), c_ES.getDate(), (c_EE.getMonth()+1), c_EE.getDate()];\n    \n\n    c_ES.getHours()   < 10 ? sHours = '0' + c_ES.getHours()   : sHours = c_ES.getHours();\n    c_ES.getMinutes() < 10 ? sMins  = '0' + c_ES.getMinutes() : sMins  = c_ES.getMinutes();\n    c_EE.getHours()   < 10 ? eHours = '0' + c_EE.getHours()   : eHours = c_EE.getHours();\n    c_EE.getMinutes() < 10 ? eMins  = '0' + c_EE.getMinutes() : eMins  = c_EE.getMinutes();\n\n\n    calArray[(i)] = {\n        'type': 'dateRange',\n        'dateRange': {\n            'timeValues': [{'value': true, 'type': 'boolean', 'time': sHours+':'+ sMins+':00.00'},\n                           {'value': null, 'type': 'null', 'time': eHours+':'+ eMins+':00.00'}],\n            'startDate': sYear + '-' + sMonth + '-' + sDay,\n            'endDate': eYear + '-' + eMonth + '-' + eDay\n        },\n    };\n}\n\n\n////////////////////////////////\n// Azure\n////////////////////////////////\nif (connectionType == 'Azure'){\n   \n\n    //////////////////////////////////////\n    // REST Base URL\n    //////////////////////////////////////\n    let iot_BaseURL  = '/api/v1/devices/';\n\n\n    ////////////////////////////////////////////////////////////////\n    // REST Parameters\n    ////////////////////////////////////////////////////////////////\n    msg                          = {};\n    msg.rejectUnauthorized       = false;\n    msg.method                   = 'post';\n    msg.headers                  = {};\n    msg.headers['Authorization'] = iot_Token;\n    msg.headers['Content-Type']  = 'application/JSON';\n    msg.headers['Remote-Query']  = local_Resource + local_Property;\n\n\n    ///////////////////////////////////////////////////////////////////////////////\n    // Build REST URL\n    ///////////////////////////////////////////////////////////////////////////////\n    msg.url = 'https://'+(iot_Address)+(iot_BaseURL)+(iot_deviceID)+'/request';\n\n\n/////////////\n// Local\n/////////////\n}else {\n    \n    \n    /////////////////////////////////////////////////\n    // REST Parameters\n    /////////////////////////////////////////////////\n    msg                          = {};\n    msg.rejectUnauthorized       = false;\n    msg.method                   = 'post';\n    msg.headers                  = {};\n    msg.headers['authorization'] = 'basic ' + base64;\n    \n    \n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Build REST URL\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    msg.url = local_Scheme + '://' + local_IP + ':' + local_Port + local_Resource + local_Property;\n    \n}\n\n\n///////////////////////////////////\n// Payload\n///////////////////////////////////\nmsg.payload = {'value': calArray};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 60,
        "wires": [
            [
                "696be0aa.bc2fc"
            ]
        ]
    },
    {
        "id": "7964c5e6495db9b5",
        "type": "function",
        "z": "b2321d7e94e56d07",
        "name": "Shelly 2 PM Plus Create BVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst bvArray = msg.payload.bvArray\nconst nameArray = msg.payload.bvpointnameArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"binaryValue\",\n      \"instance-number\": bvArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "bde9c0e7d87c1cdc",
        "type": "function",
        "z": "b2321d7e94e56d07",
        "name": "Shelly 2 PM Plus AVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst avArray = msg.payload.avArray\nconst nameArray = msg.payload.avpointnameArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"analogValue\",\n      \"instance-number\": avArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "429878952a0ba26e",
        "type": "function",
        "z": "b2321d7e94e56d07",
        "name": "Shelly 2 PM Plus AVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst avArray = msg.payload.avArray\nconst descriptionArray = msg.payload.avdescriptionArray\nconst unitsArray = msg.payload.unitsArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n  newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/analog-values/\" + avArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-increment\": \"1\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"units\": unitsArray[x]\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "bfcca562e32e21c3"
            ]
        ]
    },
    {
        "id": "bfcca562e32e21c3",
        "type": "delay",
        "z": "b2321d7e94e56d07",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0de394d0aa63050c",
        "type": "function",
        "z": "b2321d7e94e56d07",
        "name": "Shelly 2 PM Plus Create BVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst bvArray = msg.payload.bvArray\nconst descriptionArray = msg.payload.bvdescriptionArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/binary-values/\" + bvArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"active-text\": \"On\",\n      \"inactive-text\": \"Off\",\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 180,
        "wires": [
            [
                "230d6f916ba1df1b"
            ]
        ]
    },
    {
        "id": "230d6f916ba1df1b",
        "type": "delay",
        "z": "b2321d7e94e56d07",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c170104bf1134a59",
        "type": "function",
        "z": "144652240b7173dd",
        "name": "Shelly 1 PM Plus Create BVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst bvArray = msg.payload.bvArray\nconst nameArray = msg.payload.bvpointnameArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"binaryValue\",\n      \"instance-number\": bvArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "709f6d883a83db40",
        "type": "function",
        "z": "144652240b7173dd",
        "name": "Shelly 1 PM Plus AVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst avArray = msg.payload.avArray\nconst nameArray = msg.payload.avpointnameArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"analogValue\",\n      \"instance-number\": avArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2a5a9305560168d3",
        "type": "function",
        "z": "144652240b7173dd",
        "name": "Shelly 1 PM Plus AVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst avArray = msg.payload.avArray\nconst descriptionArray = msg.payload.avdescriptionArray\nconst unitsArray = msg.payload.unitsArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n  newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/analog-values/\" + avArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-increment\": \"1\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"units\": unitsArray[x]\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "301a8183f49bf527"
            ]
        ]
    },
    {
        "id": "301a8183f49bf527",
        "type": "delay",
        "z": "144652240b7173dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "71db946e42b39583",
        "type": "function",
        "z": "144652240b7173dd",
        "name": "Shelly 1 PM Plus Create BVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst bvArray = msg.payload.bvArray\nconst descriptionArray = msg.payload.bvdescriptionArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/binary-values/\" + bvArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"active-text\": \"On\",\n      \"inactive-text\": \"Off\",\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "bec19f7921eb092a"
            ]
        ]
    },
    {
        "id": "bec19f7921eb092a",
        "type": "delay",
        "z": "144652240b7173dd",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b1ee353b0839d72d",
        "type": "function",
        "z": "9ecb547ff55f14e6",
        "name": "Shelly Plug Plus Create BVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst bvArray = msg.payload.bvArray\nconst nameArray = msg.payload.bvpointnameArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"binaryValue\",\n      \"instance-number\": bvArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "df68f18f08e62c31",
        "type": "function",
        "z": "9ecb547ff55f14e6",
        "name": "Shelly Plug Plus AVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst avArray = msg.payload.avArray\nconst nameArray = msg.payload.avpointnameArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"analogValue\",\n      \"instance-number\": avArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4e761c2773120a55",
        "type": "function",
        "z": "9ecb547ff55f14e6",
        "name": "Shelly Plug Plus AVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst avArray = msg.payload.avArray\nconst descriptionArray = msg.payload.avdescriptionArray\nconst unitsArray = msg.payload.unitsArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n  newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/analog-values/\" + avArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-increment\": \"1\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"units\": unitsArray[x]\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "620beee5215c495c"
            ]
        ]
    },
    {
        "id": "620beee5215c495c",
        "type": "delay",
        "z": "9ecb547ff55f14e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "073af22bf1c52090",
        "type": "function",
        "z": "9ecb547ff55f14e6",
        "name": "Shelly Plug Plus Create BVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst bvArray = msg.payload.bvArray\nconst descriptionArray = msg.payload.bvdescriptionArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/binary-values/\" + bvArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"active-text\": \"On\",\n      \"inactive-text\": \"Off\",\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "77c4e0afd96c7dac"
            ]
        ]
    },
    {
        "id": "77c4e0afd96c7dac",
        "type": "delay",
        "z": "9ecb547ff55f14e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "50f089557f4f60fc",
        "type": "function",
        "z": "d228d85b72298a22",
        "name": "Shelly 2 PM Create BVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst bvArray = msg.payload.bvArray\nconst nameArray = msg.payload.bvpointnameArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"binaryValue\",\n      \"instance-number\": bvArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b531ebe87cbaddd1",
        "type": "function",
        "z": "d228d85b72298a22",
        "name": "Shelly 2 PM AVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst avArray = msg.payload.avArray\nconst nameArray = msg.payload.avpointnameArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"analogValue\",\n      \"instance-number\": avArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1e65c60cb1aa239e",
        "type": "function",
        "z": "d228d85b72298a22",
        "name": "Shelly 2 PM AVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst avArray = msg.payload.avArray\nconst descriptionArray = msg.payload.avdescriptionArray\nconst unitsArray = msg.payload.unitsArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n  newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/analog-values/\" + avArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-increment\": \"1\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"units\": unitsArray[x]\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "0251678586dd3538"
            ]
        ]
    },
    {
        "id": "0251678586dd3538",
        "type": "delay",
        "z": "d228d85b72298a22",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2eedca3ce567b21a",
        "type": "function",
        "z": "d228d85b72298a22",
        "name": "Shelly 2 PM Create BVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst bvArray = msg.payload.bvArray\nconst descriptionArray = msg.payload.bvdescriptionArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/binary-values/\" + bvArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"active-text\": \"On\",\n      \"inactive-text\": \"Off\",\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "8a0b29f79ee62434"
            ]
        ]
    },
    {
        "id": "8a0b29f79ee62434",
        "type": "delay",
        "z": "d228d85b72298a22",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "702313fcb87a051f",
        "type": "function",
        "z": "76bc45b0a8771bee",
        "name": "Shelly 1 PM Create BVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst bvArray = msg.payload.bvArray\nconst nameArray = msg.payload.bvpointnameArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"binaryValue\",\n      \"instance-number\": bvArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "df01a128d162f208",
        "type": "function",
        "z": "76bc45b0a8771bee",
        "name": "Shelly 1 PM AVs Loop Create",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar name = msg.payload.name\nconst avArray = msg.payload.avArray\nconst nameArray = msg.payload.avpointnameArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    var pointname = name + nameArray[x]\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/add\";\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"object-type\": \"analogValue\",\n      \"instance-number\": avArray[x],\n      \"name\": pointname,\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc49893ca82f0f77",
        "type": "function",
        "z": "76bc45b0a8771bee",
        "name": "Shelly 1 PM AVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst avArray = msg.payload.avArray\nconst descriptionArray = msg.payload.avdescriptionArray\nconst unitsArray = msg.payload.unitsArray\n\nfor (let x = 0; x < avArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n  newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/analog-values/\" + avArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-increment\": \"1\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"units\": unitsArray[x]\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 220,
        "wires": [
            [
                "fd14bfa4affe782d"
            ]
        ]
    },
    {
        "id": "fd14bfa4affe782d",
        "type": "delay",
        "z": "76bc45b0a8771bee",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e981e75f316a74f2",
        "type": "function",
        "z": "76bc45b0a8771bee",
        "name": "Shelly 1 PM Create BVs Loop Set",
        "func": "var credentials = \"admin:89t2dH75PncJSGC\"\nvar base64 = new Buffer(credentials).toString('base64')\n\nconst bvArray = msg.payload.bvArray\nconst descriptionArray = msg.payload.bvdescriptionArray\n\nfor (let x = 0; x < bvArray.length; x++) {\n  var newMsg = {};\n\n    newMsg.method = \"POST\";\n    newMsg.url = \"https://10.168.15.2/api/rest/v2/services/bacnet/local/objects/binary-values/\" + bvArray[x];\n    newMsg.headers = {};\n    newMsg.headers['authorization'] = 'basic ' + base64;\n    newMsg.headers['Content-Type'] = \"application/JSON\";\n\n    var body =\n    {\n      \"description\": descriptionArray[x],\n      \"broadcast-mode\": \"Local\",\n      \"cov-max-send-time\": \"600\",\n      \"cov-min-send-time\": \"10\",\n      \"active-text\": \"On\",\n      \"inactive-text\": \"Off\",\n    };\n  newMsg.payload = body;\n  node.send(newMsg);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "1b6b7c49a7f93273"
            ]
        ]
    },
    {
        "id": "1b6b7c49a7f93273",
        "type": "delay",
        "z": "76bc45b0a8771bee",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "208379c0.81563e",
        "type": "exec",
        "z": "4f6b87ae.7d3bb",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "13486428.bcfc4c"
            ],
            [],
            []
        ]
    },
    {
        "id": "13486428.bcfc4c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "cf0b484b.b70c9",
        "type": "switch",
        "z": "4f6b87ae.7d3bb",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "208379c0.81563e"
            ],
            [
                "56426a5a.fbc44c"
            ]
        ]
    },
    {
        "id": "56426a5a.fbc44c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "208379c0.81563e"
            ]
        ]
    },
    {
        "id": "cad30fd9439c295b",
        "type": "http request",
        "z": "02028ef19d861d4d",
        "name": "ECY POST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "340fe7c22ea79570",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "3a8268c69257beac"
            ]
        ]
    },
    {
        "id": "513db40648332f4c",
        "type": "delay",
        "z": "02028ef19d861d4d",
        "name": "",
        "pauseType": "rate",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "cad30fd9439c295b",
                "3a8268c69257beac"
            ]
        ]
    },
    {
        "id": "7ca76781a75ce390",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "Build BI ECY POST",
        "links": [
            "1bb2176786c79db9",
            "2289794530195c6d",
            "407687ea99747142",
            "74c809eb8fb342db",
            "a14dabbb64ed510b",
            "f21bd66087308795",
            "f77ee3e835a43f89",
            "fa17ad882d47c6be"
        ],
        "x": 205,
        "y": 140,
        "wires": [
            [
                "513db40648332f4c"
            ]
        ]
    },
    {
        "id": "1c0c5bb495cdd64e",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pointsData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f587a33905211532",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "Global Points",
        "links": [
            "cd7424b3bff7ad5d"
        ],
        "x": 205,
        "y": 540,
        "wires": [
            [
                "1c0c5bb495cdd64e"
            ]
        ]
    },
    {
        "id": "9fbf4982ac1e9f8e",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "biData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "57f4f1320af156d7",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 1",
        "links": [
            "533af1d504183642"
        ],
        "x": 205,
        "y": 180,
        "wires": [
            [
                "9fbf4982ac1e9f8e"
            ]
        ]
    },
    {
        "id": "8a55afbffec21e90",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buildingsData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "73e14059de37047d",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 2",
        "links": [
            "78ab945fb4fba659"
        ],
        "x": 205,
        "y": 220,
        "wires": [
            [
                "8a55afbffec21e90"
            ]
        ]
    },
    {
        "id": "3bb6832eb8f8f5d5",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "equipmentBuildingData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "97d705770a5feaef",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 3",
        "links": [
            "39e05c03684caaa3"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "3bb6832eb8f8f5d5"
            ]
        ]
    },
    {
        "id": "a61afde148aad78e",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "floorsData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "aa6876d5cbc60ccd",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 4",
        "links": [
            "f711822fb11f90b8"
        ],
        "x": 205,
        "y": 300,
        "wires": [
            [
                "a61afde148aad78e"
            ]
        ]
    },
    {
        "id": "9f18133c26e43af2",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "equipmentFloorData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a0a089d0d84382ee",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 5",
        "links": [
            "39402b06ea85e1f3"
        ],
        "x": 205,
        "y": 340,
        "wires": [
            [
                "9f18133c26e43af2"
            ]
        ]
    },
    {
        "id": "3d5ee93dbae70af0",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "spacesData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "7ac0677d1feffe54",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 6",
        "links": [
            "6ce689ec65ad2715"
        ],
        "x": 205,
        "y": 380,
        "wires": [
            [
                "3d5ee93dbae70af0"
            ]
        ]
    },
    {
        "id": "64fcb58ff64b8137",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "equipmentSpaceData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "738235258014828d",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 7",
        "links": [
            "33f6a2fde5ea7944"
        ],
        "x": 205,
        "y": 420,
        "wires": [
            [
                "64fcb58ff64b8137"
            ]
        ]
    },
    {
        "id": "e3496639c4c2569a",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "deviceData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ac16122fdef16a3f",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 8",
        "links": [
            "3e39d409b81ace48"
        ],
        "x": 205,
        "y": 460,
        "wires": [
            [
                "e3496639c4c2569a"
            ]
        ]
    },
    {
        "id": "18f1e819aab9bb04",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "duplicateData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "83d40ae6e0db2ed0",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 9",
        "links": [
            "6180abb6a76d5f7a"
        ],
        "x": 205,
        "y": 500,
        "wires": [
            [
                "18f1e819aab9bb04"
            ]
        ]
    },
    {
        "id": "081f6bd389cd0ba7",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "devicePointsData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "fdaca98950b8c303",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 10",
        "links": [
            "0a855768ccaf85c3"
        ],
        "x": 205,
        "y": 580,
        "wires": [
            [
                "081f6bd389cd0ba7"
            ]
        ]
    },
    {
        "id": "78dc079e28f0ffc9",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dlinkData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d5969fef41ea096d",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 11",
        "links": [
            "545ad74ade39d13e"
        ],
        "x": 205,
        "y": 620,
        "wires": [
            [
                "78dc079e28f0ffc9"
            ]
        ]
    },
    {
        "id": "c184d695bd6cb1dc",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "spacesPlinkData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "543a23bc4e0537e9",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 12",
        "links": [
            "120b2a925f4d1137"
        ],
        "x": 205,
        "y": 740,
        "wires": [
            [
                "c184d695bd6cb1dc"
            ]
        ]
    },
    {
        "id": "67228b6a3847534d",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "bldgplinkData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "e91a1d0eae04ddf8",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 13",
        "links": [
            "8358c9af6508a04c"
        ],
        "x": 205,
        "y": 660,
        "wires": [
            [
                "67228b6a3847534d"
            ]
        ]
    },
    {
        "id": "3a8268c69257beac",
        "type": "debug",
        "z": "02028ef19d861d4d",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "025fef255957606d",
        "type": "change",
        "z": "02028ef19d861d4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "eqPlinkData",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "12ba501b65d90bea",
        "type": "link in",
        "z": "02028ef19d861d4d",
        "name": "link in 14",
        "links": [
            "0a484e00fda95fb8"
        ],
        "x": 205,
        "y": 700,
        "wires": [
            [
                "025fef255957606d"
            ]
        ]
    },
    {
        "id": "5240ceb0cfcf47ce",
        "type": "function",
        "z": "a67ed6b61499d55d",
        "name": "BI Settings Array Mapping",
        "func": "const ipaddrArray = msg.payload.ipaddr\nconst userArray = msg.payload.user\nconst passwordArray = msg.payload.password\n\n\n\nconst settings = [...ipaddrArray].map((element, index) => (\n    { \"Address\": element, \"User\": userArray[index], \n    \"Password\": passwordArray[index]}))\n\nmsg.payload = settings\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 40,
        "wires": [
            [
                "304510b1a29c646e"
            ]
        ]
    },
    {
        "id": "e6481bc978634c8f",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Duplicate Data Out",
        "mode": "link",
        "links": [
            "2f354f33b14d7b32"
        ],
        "x": 365,
        "y": 120,
        "wires": []
    },
    {
        "id": "bb8fd8a7625d6278",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Devices Out",
        "mode": "link",
        "links": [
            "5793f3e79c18b8ef"
        ],
        "x": 365,
        "y": 160,
        "wires": []
    },
    {
        "id": "e0b1b84891096e73",
        "type": "function",
        "z": "a67ed6b61499d55d",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar ipaddr = payload['ipaddr'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar user = payload['user'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar password = payload['password'].split(',').map(function(value){\n    return value.trim();\n});\n\nmsg.payload = {\n    ipaddr: ipaddr,\n    user: user,\n    password: password\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 40,
        "wires": [
            [
                "5240ceb0cfcf47ce",
                "533af1d504183642"
            ]
        ]
    },
    {
        "id": "d8e4f882c2c41f2a",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Devices Out",
        "mode": "link",
        "links": [
            "29c11df262124d2b"
        ],
        "x": 365,
        "y": 200,
        "wires": []
    },
    {
        "id": "7a548812bd17b6f4",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Buildings Out",
        "mode": "link",
        "links": [
            "7cab7f5eff3a35bc"
        ],
        "x": 365,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7d7e244e97c8232",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Floors Out",
        "mode": "link",
        "links": [
            "1bfdfcf1e7175a51"
        ],
        "x": 365,
        "y": 280,
        "wires": []
    },
    {
        "id": "07aae2f662315203",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Spaces Out",
        "mode": "link",
        "links": [
            "c2a7eb1cf3416bdb"
        ],
        "x": 365,
        "y": 320,
        "wires": []
    },
    {
        "id": "0e665f4576159b14",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Equipment",
        "mode": "link",
        "links": [
            "e8f568378342c46f",
            "3e77d0056e59b1ec"
        ],
        "x": 365,
        "y": 360,
        "wires": []
    },
    {
        "id": "2cf080e9b7fe7b73",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Equipment",
        "mode": "link",
        "links": [
            "0403017550f0952f",
            "fdd30633f22863ac"
        ],
        "x": 365,
        "y": 400,
        "wires": []
    },
    {
        "id": "ac5419a94f753920",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Create Equipment",
        "mode": "link",
        "links": [
            "91a7135b46400d63"
        ],
        "x": 365,
        "y": 440,
        "wires": []
    },
    {
        "id": "7382f6381a9dce98",
        "type": "inject",
        "z": "a67ed6b61499d55d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Enter your IP Address, User Name, & Password",
        "payloadType": "str",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "7e012f8261c2da37"
            ]
        ]
    },
    {
        "id": "67680ba2864e798c",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "e81150a8478bfea6",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Duplicate",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "e6481bc978634c8f"
            ]
        ]
    },
    {
        "id": "0ac7ad43cd2e9ccc",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "b4438a213cf74446",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Devices",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "bb8fd8a7625d6278"
            ]
        ]
    },
    {
        "id": "7bdc64f51954d3c9",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "d66e38329ea74f08",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Points",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "d8e4f882c2c41f2a"
            ]
        ]
    },
    {
        "id": "01be9ee6cad5ada6",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "3a899fd5b60429ec",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Buildings",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "7a548812bd17b6f4"
            ]
        ]
    },
    {
        "id": "5f6ca5db896febea",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "d1172758832a43a4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Floors",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "c7d7e244e97c8232"
            ]
        ]
    },
    {
        "id": "bc49551d746444e8",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "c60ea1bdb0f8cba0",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Spaces",
        "tooltip": "Only execute this once all settings have been populated!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "07aae2f662315203"
            ]
        ]
    },
    {
        "id": "41acc922c7f1671c",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "131cb1262fa32f5e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Equipment to Spaces",
        "tooltip": "Only execute this once alls settings on this page and the connectors page are set!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "0e665f4576159b14"
            ]
        ]
    },
    {
        "id": "a535fca83c568d47",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "2618ec148bee5326",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Equipment to Floors",
        "tooltip": "Only execute this once alls settings on this page and the connectors page are set!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "2cf080e9b7fe7b73"
            ]
        ]
    },
    {
        "id": "827a2136554c2dd3",
        "type": "ui_button",
        "z": "a67ed6b61499d55d",
        "name": "",
        "group": "770b05710b6db0bb",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Create Equipment to Building",
        "tooltip": "Only execute this once alls settings on this page and the connectors page are set!",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "ac5419a94f753920"
            ]
        ]
    },
    {
        "id": "9a81ae88f43ac2fb",
        "type": "ui_form",
        "z": "a67ed6b61499d55d",
        "name": "",
        "label": "",
        "group": "404f70c1b4fca788",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Building Intelligence Address",
                "value": "ipaddr",
                "type": "multiline",
                "required": true,
                "rows": 1
            },
            {
                "label": "User Name",
                "value": "user",
                "type": "multiline",
                "required": true,
                "rows": 1
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ipaddr": "",
            "user": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "e0b1b84891096e73"
            ]
        ]
    },
    {
        "id": "7e012f8261c2da37",
        "type": "ui_text",
        "z": "a67ed6b61499d55d",
        "group": "404f70c1b4fca788",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "304510b1a29c646e",
        "type": "ui_table",
        "z": "a67ed6b61499d55d",
        "d": true,
        "group": "404f70c1b4fca788",
        "name": "BI Settings",
        "order": 3,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1190,
        "y": 40,
        "wires": []
    },
    {
        "id": "533af1d504183642",
        "type": "link out",
        "z": "a67ed6b61499d55d",
        "name": "Global BI Data",
        "mode": "link",
        "links": [
            "57f4f1320af156d7"
        ],
        "x": 745,
        "y": 80,
        "wires": []
    },
    {
        "id": "c22cc317dc435c48",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Add a Building to the Site Tree Batch",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar buildingsData = global.get('buildingsData');\nconst nameArray = buildingsData.building.nameArray\nconst descriptionArray = buildingsData.building.descriptionArray\nconst areaArray = buildingsData.building.areaArray\nconst useTypeArray = buildingsData.building.useTypeArray\nconst addressArray = buildingsData.building.addressArray\nconst yearBuiltArray = buildingsData.building.yearBuiltArray\nconst dashboardArray = buildingsData.building.dashboardArray\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\nvar create =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"local-name\": nameArray[i],\n        \"description\": descriptionArray[i],\n        \"address\": addressArray[i],\n        \"area\": areaArray[i],\n        \"year-built\": yearBuiltArray[i]\n      }\n    };\n  })\n\nvar details =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\",\n      }\n    };\n  })\n\nconst requests = create.concat(details);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "2289794530195c6d"
            ]
        ]
    },
    {
        "id": "059e72a6adb481ac",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Points Array Mapping",
        "func": "const nameArray = msg.payload.building.nameArray\nconst descriptionArray = msg.payload.building.descriptionArray\nconst areaArray = msg.payload.building.areaArray\nconst useTypeArray = msg.payload.building.useTypeArray\nconst addressArray = msg.payload.building.addressArray\nconst yearBuiltArray = msg.payload.building.yearBuiltArray\nconst dashboardArray = msg.payload.building.dashboardArray\n\nconst points = [...nameArray].map((element, index) => (\n    {\n        \"Name\": element,\n        \"Description\": descriptionArray[index],\n        \"Area (Sq Ft)\": areaArray[index],\n        \"Use Type\": useTypeArray[index],\n        \"Address\": addressArray[index],\n        \"Year Built\": yearBuiltArray[index],\n        \"Dashboard\": dashboardArray[index]\n    }))\n\nmsg.payload = points\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 40,
        "wires": [
            [
                "be7056d5c3cc1a71"
            ]
        ]
    },
    {
        "id": "09bc2be635969999",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload['building.nameArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar descriptionArray = payload['building.descriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload['building.areaArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar useTypeArray = payload['building.useTypeArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar addressArray = payload['building.addressArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar yearBuiltArray = payload['building.yearBuiltArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dashboardArray = payload['building.dashboardArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"building\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        useTypeArray: useTypeArray,\n        addressArray: addressArray,\n        yearBuiltArray: yearBuiltArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "059e72a6adb481ac",
                "ec715d09b2e74925"
            ]
        ]
    },
    {
        "id": "7cab7f5eff3a35bc",
        "type": "link in",
        "z": "bcf9f3ab3616eee4",
        "name": "Create Buildings In",
        "links": [
            "7a548812bd17b6f4"
        ],
        "x": 355,
        "y": 320,
        "wires": [
            [
                "c22cc317dc435c48"
            ]
        ]
    },
    {
        "id": "2289794530195c6d",
        "type": "link out",
        "z": "bcf9f3ab3616eee4",
        "name": "Add Building to Site Tree",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 1005,
        "y": 320,
        "wires": []
    },
    {
        "id": "39e8adfe6087c3ea",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            [
                "4c3f350af18da0b0"
            ]
        ]
    },
    {
        "id": "f6d03633abe620f0",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "39e8adfe6087c3ea",
                "2f3cc1e6430bc4e8"
            ]
        ]
    },
    {
        "id": "2f3cc1e6430bc4e8",
        "type": "csv",
        "z": "bcf9f3ab3616eee4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "89c0b4dfcb572a56"
            ]
        ]
    },
    {
        "id": "89c0b4dfcb572a56",
        "type": "join",
        "z": "bcf9f3ab3616eee4",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 200,
        "wires": [
            [
                "1e94f3eb893688d5"
            ]
        ]
    },
    {
        "id": "a2ad205665bf2deb",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst useTypeArray = data[\"Use Type\"]\nconst areaArray = data.Area\nconst addressArray = data.Address\nconst yearBuiltArray = data[\"Year Built\"]\nconst dashboardArray = data.Dashboard\n\nmsg.payload = {\n    \"building\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        useTypeArray: useTypeArray,\n        addressArray: addressArray,\n        yearBuiltArray: yearBuiltArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "059e72a6adb481ac",
                "ec715d09b2e74925"
            ]
        ]
    },
    {
        "id": "1e94f3eb893688d5",
        "type": "function",
        "z": "bcf9f3ab3616eee4",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "a2ad205665bf2deb"
            ]
        ]
    },
    {
        "id": "94a14e398dc8c1d5",
        "type": "inject",
        "z": "bcf9f3ab3616eee4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Enter Building Information Manually or Upload a CSV File",
        "payloadType": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "98415a6cb66001d6"
            ]
        ]
    },
    {
        "id": "4c3f350af18da0b0",
        "type": "chunks-to-lines",
        "z": "bcf9f3ab3616eee4",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "f6d03633abe620f0"
            ]
        ]
    },
    {
        "id": "ae6e21a8015ac13d",
        "type": "ui_upload",
        "z": "bcf9f3ab3616eee4",
        "group": "d3663c5df3961225",
        "title": "Upload a CSV of Building Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": "13",
        "height": "9",
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 140,
        "wires": [
            [
                "4c3f350af18da0b0"
            ]
        ]
    },
    {
        "id": "7d33719c6d6b7bd5",
        "type": "ui_form",
        "z": "bcf9f3ab3616eee4",
        "name": "",
        "label": "Buidings Form",
        "group": "15fa34f2f93321e0",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "building.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description",
                "value": "building.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area (SqFt)",
                "value": "building.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Use Type",
                "value": "building.useTypeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Address",
                "value": "building.addressArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Year Built",
                "value": "building.yearBuiltArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Dashboard",
                "value": "building.dashboardArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "building.nameArray": "",
            "building.descriptionArray": "",
            "building.areaArray": "",
            "building.useTypeArray": "",
            "building.addressArray": "",
            "building.yearBuiltArray": "",
            "building.dashboardArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "09bc2be635969999"
            ]
        ]
    },
    {
        "id": "98415a6cb66001d6",
        "type": "ui_text",
        "z": "bcf9f3ab3616eee4",
        "group": "dab525956888b053",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 530,
        "y": 380,
        "wires": []
    },
    {
        "id": "be7056d5c3cc1a71",
        "type": "ui_table",
        "z": "bcf9f3ab3616eee4",
        "group": "3a899fd5b60429ec",
        "name": "Buidings Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1280,
        "y": 40,
        "wires": []
    },
    {
        "id": "78ab945fb4fba659",
        "type": "link out",
        "z": "bcf9f3ab3616eee4",
        "name": "Global Building Data",
        "mode": "link",
        "links": [
            "73e14059de37047d"
        ],
        "x": 1215,
        "y": 100,
        "wires": []
    },
    {
        "id": "016f10d20253d12f",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Equipment Array Mapping",
        "func": "const nameArray = msg.payload.equipment.nameArray\nconst areaArray = msg.payload.equipment.areaArray\nconst descriptionArray = msg.payload.equipment.descriptionArray\nconst orderArray = msg.payload.equipment.orderArray\nconst buildingArray = msg.payload.equipment.buildingArray\nconst typeArray = msg.payload.equipment.typeArray\nconst subTypeArray = msg.payload.equipment.subTypeArray\nconst dashboardArray = msg.payload.equipment.dashboardArray\nconst idArray = msg.payload.equipment.idArray\nconst dNameArray = msg.payload.equipment.dNameArray\nconst dDArray = msg.payload.equipment.dDArray\n\nconst equipment = [...nameArray].map((element, index) => (\n    {\n        \"Equipment\": element, \n        \"Area Served\": areaArray[index],\n        \"Type\": typeArray[index],\n        \"Sub Type\": subTypeArray[index],\n        \"Description\": descriptionArray[index],\n        \"Order\": orderArray[index],\n        \"Building\": buildingArray[index],\n        \"Dashboard\": dashboardArray[index],\n        \"Instance\": idArray[index],\n        \"Device Name\": dNameArray[index],\n        \"Device Description\": dDArray[index]\n        }))\n\nmsg.payload = equipment\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 40,
        "wires": [
            [
                "5a8b9ce166f45a6d"
            ]
        ]
    },
    {
        "id": "7ba546fcc9ead90e",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload[\"equipment.nameArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar descriptionArray = payload[\"equipment.descriptionArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar orderArray = payload[\"equipment.orderArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload[\"equipment.areaArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar typeArray = payload[\"equipment.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar subTypeArray = payload[\"equipment.subTypeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar buildingArray = payload['equipment.buildingArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar idArray = payload['equipment.idArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dNameArray = payload['equipment.dNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dDArray = payload['equipment.dDArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        buildingArray: buildingArray,\n        idArray: idArray, \n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "016f10d20253d12f",
                "61ebc657f7c6ebfc"
            ]
        ]
    },
    {
        "id": "35fd3809155c890c",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Add Equipment to Building in Site Tree",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar equipmentData = global.get('equipmentBuildingData');\nconst buildingArray = equipmentData.equipment.buildingArray\nconst nameArray = equipmentData.equipment.nameArray\nconst descriptionArray = equipmentData.equipment.descriptionArray\nconst orderArray = equipmentData.equipment.orderArray\nconst areaArray = equipmentData.equipment.areaArray\nconst subTypeArray = equipmentData.equipment.subTypeArray\nconst typeArray = equipmentData.equipment.typeArray\nconst dashboardArray = equipmentData.equipment.dashboardArray\nconst idArray = equipmentData.equipment.idArray\nconst dNameArray = equipmentData.equipment.dNameArray\nconst dDArray = equipmentData.equipment.dDArray\n\nvar plinkData = global.get('bldgplinkData');\nconst pointNameArray = plinkData.plink.pointNameArray\nconst pointDescriptionArray = plinkData.plink.pointDescriptionArray\nconst pTypeArray = plinkData.plink.typeArray\nconst instanceArray = plinkData.plink.instanceArray\nconst policyArray = plinkData.plink.policyArray\nconst groupArray = pTypeArray.map((value) => {\n  return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\nvar create_equipment =\n  nameArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/equipment/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"description\": descriptionArray[i],\n        \"order\": parseInt(orderArray[i]),\n        \"serves\": areaArray[i],\n        \"subtype\": subTypeArray[i],\n        \"type\": typeArray[i]\n      }\n    };\n  })\n\nvar equipment_details =\n  nameArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/equipment/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\"\n      }\n    };\n  })\n\nvar create_device =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n    };\n  })\n\nvar device_details =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"local-name\": dNameArray[i],\n        \"description\": dDArray[i]\n      }\n    };\n  })\n\nvar create_points = [];\nidArray.map((x, i) => {\n  var url = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/add\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    create_points.push({\n      //id: String(i + 1),\n      url: url,\n      method: \"POST\",\n      body: {\n        \"object-type\": pTypeArray[i],\n        \"instance-number\": parseInt(instanceArray[i]),\n        \"name\": pointNameArray[i],\n        //\"description\": pointDescriptionArray[i],\n        //\"policy\": policyArray[i]\n      }\n    });\n  }\n})\n\nvar point_details = [];\nidArray.map((x, i) => {\n  var url2 = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    point_details.push({\n      //id: String(i + 1),\n      url: url2 + groupArray[i] + \"/\" + instanceArray[i],\n      method: \"POST\",\n      body: {\n        \"description\": pointDescriptionArray[i],\n        \"policy\": policyArray[i],\n      }\n    });\n  }\n})\n\nvar device_link =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/equipment/\" + nameArray[i] + \"/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"path\": \"/services/bacnet/remote/devices/\" + idArray[i],\n      }\n    };\n  })\n\nvar point_link = nameArray.flatMap((x, i) => {\n  return pointNameArray.map((z, j) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/equipment/\" + nameArray[i] + \"/points/\" + z,\n      \"method\": \"POST\",\n      \"body\":\n      {\n        \"object-identifier\": groupArray[j],\n        \"instance-number\": parseInt(instanceArray[j]),\n        \"local-name\": z,\n        \"reference\": \"/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\" + groupArray[j] + \"/\" + instanceArray[j]\n      }\n    }\n  })\n});\n\nconst requests = create_equipment.concat(equipment_details, create_device, device_details, create_points, point_details, device_link, point_link);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            [
                "1bb2176786c79db9"
            ]
        ]
    },
    {
        "id": "1bb2176786c79db9",
        "type": "link out",
        "z": "5aef4fc5ed2691d4",
        "name": "Add Eq to Buildings in Site Tree",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 1045,
        "y": 680,
        "wires": []
    },
    {
        "id": "91a7135b46400d63",
        "type": "link in",
        "z": "5aef4fc5ed2691d4",
        "name": "Create Equipment In",
        "links": [
            "ac5419a94f753920"
        ],
        "x": 255,
        "y": 680,
        "wires": [
            [
                "35fd3809155c890c"
            ]
        ]
    },
    {
        "id": "da983aee3432847d",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "44eb394b2e0605bb"
            ]
        ]
    },
    {
        "id": "a9590dd0def6e3c6",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "da983aee3432847d",
                "c24f78528d13c5a0"
            ]
        ]
    },
    {
        "id": "c24f78528d13c5a0",
        "type": "csv",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "fecd60892dbeae96"
            ]
        ]
    },
    {
        "id": "fecd60892dbeae96",
        "type": "join",
        "z": "5aef4fc5ed2691d4",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "2725c3171738c283"
            ]
        ]
    },
    {
        "id": "0d0b952f9f5de867",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst orderArray = data.Order\nconst areaArray = data[\"Area Served\"]\nconst typeArray = data.Type\nconst subTypeArray = data.Subtype\nconst buildingArray = data.Building\nconst dashboardArray = data.Dashboard\nconst idArray = data[\"Device ID\"]\nconst dNameArray = data[\"Device Name\"]\nconst dDArray = data.Description\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray,\n        idArray: idArray,\n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "016f10d20253d12f",
                "61ebc657f7c6ebfc"
            ]
        ]
    },
    {
        "id": "2725c3171738c283",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "0d0b952f9f5de867"
            ]
        ]
    },
    {
        "id": "e6ddcd2d9cde27f2",
        "type": "inject",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Add Equipment and Points at the Building Level By Entering the Data Manually or Upload CSVs",
        "payloadType": "str",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "c3683a05a5a87020"
            ]
        ]
    },
    {
        "id": "44eb394b2e0605bb",
        "type": "chunks-to-lines",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "a9590dd0def6e3c6"
            ]
        ]
    },
    {
        "id": "51b281e68c5c7ead",
        "type": "ui_upload",
        "z": "5aef4fc5ed2691d4",
        "group": "09386473d7716117",
        "title": "Upload a CSV of Equipment to Building Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 13,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "44eb394b2e0605bb"
            ]
        ]
    },
    {
        "id": "3d3b01d4ac843ec4",
        "type": "ui_form",
        "z": "5aef4fc5ed2691d4",
        "name": "Equipment to Building",
        "label": "Equipment:",
        "group": "27c65a6bbe891ed2",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Equipment (Ex. VAV200, VAV201, VAV301)",
                "value": "equipment.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description (Ex. Office-VAV, Cafe-VAV, Entry-VAV)",
                "value": "equipment.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Order (Ex. 1,2,1)",
                "value": "equipment.orderArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area Served (Ex. Room-200, Room-201, Room-301)",
                "value": "equipment.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Type (See Dropdown in BI)",
                "value": "equipment.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Subtype (Custom)",
                "value": "equipment.subTypeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Buildings (Match the name in the Site Tree)",
                "value": "equipment.buildingArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Dashboard",
                "value": "equipment.dashboardArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device ID",
                "value": "equipment.idArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Name",
                "value": "equipment.dNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Description",
                "value": "equipment.dDArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "equipment.nameArray": "",
            "equipment.descriptionArray": "",
            "equipment.orderArray": "",
            "equipment.areaArray": "",
            "equipment.typeArray": "",
            "equipment.subTypeArray": "",
            "equipment.buildingArray": "",
            "equipment.dashboardArray": "",
            "equipment.idArray": "",
            "equipment.dNameArray": "",
            "equipment.dDArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "7ba546fcc9ead90e"
            ]
        ]
    },
    {
        "id": "c3683a05a5a87020",
        "type": "ui_text",
        "z": "5aef4fc5ed2691d4",
        "group": "ca58f85e97a49f3a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a8b9ce166f45a6d",
        "type": "ui_table",
        "z": "5aef4fc5ed2691d4",
        "group": "770b05710b6db0bb",
        "name": "Equipment Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1230,
        "y": 40,
        "wires": []
    },
    {
        "id": "39e05c03684caaa3",
        "type": "link out",
        "z": "5aef4fc5ed2691d4",
        "name": "Global Equipment/Building Data",
        "mode": "link",
        "links": [
            "97d705770a5feaef"
        ],
        "x": 1305,
        "y": 80,
        "wires": []
    },
    {
        "id": "7cc215b9e7814aaa",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar dlinkData = global.get('dlinkData');\nconst idArray = dlinkData.dlink.didArray\n\n\nvar typeArray = payload[\"plink.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar instanceArray = payload['plink.instanceArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointNameArray = payload['plink.pointNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointDescriptionArray = payload['plink.pointDescriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        typeArray: typeArray,\n        instanceArray: instanceArray,\n        pointNameArray: pointNameArray,\n        pointDescriptionArray: pointDescriptionArray,\n//        refArray: refArray,\n        groupArray: groupArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "66e0daa7fcecab24",
                "bbc5e0df11aae2b4"
            ]
        ]
    },
    {
        "id": "66e0daa7fcecab24",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Point Link Array Mapping",
        "func": "const pointNameArray = msg.payload.plink.pointNameArray\nconst pointDescriptionArray = msg.payload.plink.pointDescriptionArray\nconst typeArray = msg.payload.plink.typeArray\nconst instanceArray = msg.payload.plink.instanceArray\n//const refArray = msg.payload.plink.refArray\nconst groupArray = msg.payload.plink.groupArray\n\nconst plink = [...pointNameArray].map((element, index) => (\n    {\n        \"Point Name\": element,\n        \"Point Description\": pointDescriptionArray[index],\n        \"Point Type\": typeArray[index],\n        \"Point Instance\": instanceArray[index],\n//        \"Reference path\": refArray[index],\n        \"Group\": groupArray[index],\n        }))\n\nmsg.payload = plink\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "350fbb712211e9a9"
            ]
        ]
    },
    {
        "id": "64f3d755bc3cb4c9",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 380,
        "wires": [
            [
                "260b8bdb08c76cb0"
            ]
        ]
    },
    {
        "id": "b79d260dd17e4fe0",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "64f3d755bc3cb4c9",
                "7246bf5b5ed5af09"
            ]
        ]
    },
    {
        "id": "7246bf5b5ed5af09",
        "type": "csv",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "12edca7bc6dbd046"
            ]
        ]
    },
    {
        "id": "12edca7bc6dbd046",
        "type": "join",
        "z": "5aef4fc5ed2691d4",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 440,
        "wires": [
            [
                "46409de4407b97cb"
            ]
        ]
    },
    {
        "id": "75fbea1d2368467b",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\n//var dlinkData = global.get('dlinkData');\n//const idArray = dlinkData.dlink.idArray\n\nconst pointNameArray = data.Name\nconst instanceArray = data.Instance\nconst typeArray = data.Type\nconst pointDescriptionArray = data.Description\nconst policyArray = data[\"Tuning Policy\"]\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        pointNameArray: pointNameArray,\n        instanceArray: instanceArray,\n        typeArray: typeArray,\n        pointDescriptionArray: pointDescriptionArray,\n        policyArray: policyArray,\n        groupArray: groupArray\n//        refArray: refArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 500,
        "wires": [
            [
                "66e0daa7fcecab24",
                "bbc5e0df11aae2b4"
            ]
        ]
    },
    {
        "id": "46409de4407b97cb",
        "type": "function",
        "z": "5aef4fc5ed2691d4",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 500,
        "wires": [
            [
                "75fbea1d2368467b"
            ]
        ]
    },
    {
        "id": "260b8bdb08c76cb0",
        "type": "chunks-to-lines",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "b79d260dd17e4fe0"
            ]
        ]
    },
    {
        "id": "52600c598e708238",
        "type": "ui_upload",
        "z": "5aef4fc5ed2691d4",
        "group": "04878dc678804c5f",
        "title": "Upload a CSV of Points",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 7,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 380,
        "wires": [
            [
                "260b8bdb08c76cb0"
            ]
        ]
    },
    {
        "id": "73d040224aab7a46",
        "type": "ui_form",
        "z": "5aef4fc5ed2691d4",
        "name": "",
        "label": "Points:",
        "group": "0e7cc617bc04a187",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Type (Ex. multiStateValue, binaryValue, analogValue)",
                "value": "plink.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Instance (Ex. [1, 2, 3]",
                "value": "plink.instanceArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Name (Ex. SpaceTemp, RoomTemp, SupplyTemp)",
                "value": "plink.pointNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Description (Ex. Space Temperature Sensor, Room Temperature Sensor, Supply Air Temperature Sensor)",
                "value": "plink.pointDescriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Tuning Policy",
                "value": "plinkData.bacnet.point.policyArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "plink.typeArray": "",
            "plink.instanceArray": "",
            "plink.pointNameArray": "",
            "plink.pointDescriptionArray": "",
            "plinkData.bacnet.point.policyArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 70,
        "y": 300,
        "wires": [
            [
                "7cc215b9e7814aaa"
            ]
        ]
    },
    {
        "id": "350fbb712211e9a9",
        "type": "ui_table",
        "z": "5aef4fc5ed2691d4",
        "group": "394dd5c9e772b680",
        "name": "Point Link Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "8358c9af6508a04c",
        "type": "link out",
        "z": "5aef4fc5ed2691d4",
        "name": "Global PLink Data",
        "mode": "link",
        "links": [
            "e91a1d0eae04ddf8"
        ],
        "x": 1195,
        "y": 340,
        "wires": []
    },
    {
        "id": "5f6155a7af042754",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Add Floors to Buildings in Site Tree Batch",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar floorData = global.get('floorsData');\nconst buildingArray = floorData.floor.buildingArray\nconst nameArray = floorData.floor.nameArray\nconst areaArray = floorData.floor.areaArray\nconst descriptionArray = floorData.floor.descriptionArray\nconst levelArray = floorData.floor.levelArray\nconst orderArray = floorData.floor.orderArray\nconst dashboardArray = floorData.floor.dashboardArray\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\nvar create =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"area\": parseInt(areaArray[i]),\n        \"description\": descriptionArray[i],\n        \"level-number\": parseInt(levelArray[i]),\n        \"order\": parseInt(orderArray[i]),\n      }\n    };\n  })\n\nvar details =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\",\n      }\n    };\n  })\n\nconst requests = create.concat(details);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "fa17ad882d47c6be"
            ]
        ]
    },
    {
        "id": "5f0ee2e85916b8b2",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Points Array Mapping",
        "func": "\nconst nameArray = msg.payload.floor.nameArray\nconst descriptionArray = msg.payload.floor.descriptionArray\nconst areaArray = msg.payload.floor.areaArray\nconst levelArray = msg.payload.floor.levelArray\nconst orderArray = msg.payload.floor.orderArray\nconst buildingArray = msg.payload.floor.buildingArray\nconst dashboardArray = msg.payload.floor.dashboardArray\n\nconst points = [...nameArray].map((element, index) => (\n    {\n        \"Name\": element,\n        \"Description\": descriptionArray[index],\n        \"Area (Sq Ft)\": areaArray[index],\n        \"Level\": levelArray[index],\n        \"Order\": orderArray[index],\n        \"Building\": buildingArray[index],\n        \"Dashboard\": dashboardArray[index]\n    }))\n\nmsg.payload = points\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 40,
        "wires": [
            [
                "d35a8ee028283566"
            ]
        ]
    },
    {
        "id": "197fcd866de68ebd",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload['floor.nameArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar descriptionArray = payload['floor.descriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload['floor.areaArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar levelArray = payload['floor.levelArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar orderArray = payload['floor.orderArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar buildingArray = payload['floor.buildingArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dashboardArray = payload['floor.dashboardArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"floor\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        levelArray: levelArray,\n        orderArray: orderArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "5f0ee2e85916b8b2",
                "8ee91f0e6ba9b10b"
            ]
        ]
    },
    {
        "id": "1bfdfcf1e7175a51",
        "type": "link in",
        "z": "ca30e93108932849",
        "name": "Create Floors In",
        "links": [
            "c7d7e244e97c8232"
        ],
        "x": 225,
        "y": 380,
        "wires": [
            [
                "5f6155a7af042754"
            ]
        ]
    },
    {
        "id": "fa17ad882d47c6be",
        "type": "link out",
        "z": "ca30e93108932849",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 975,
        "y": 380,
        "wires": []
    },
    {
        "id": "28bb78239af87221",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "f2d7f308df4eb4aa"
            ]
        ]
    },
    {
        "id": "c7b07becf7d121d0",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "28bb78239af87221",
                "dad5b235549116c5"
            ]
        ]
    },
    {
        "id": "dad5b235549116c5",
        "type": "csv",
        "z": "ca30e93108932849",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "76904bdda929cef9"
            ]
        ]
    },
    {
        "id": "76904bdda929cef9",
        "type": "join",
        "z": "ca30e93108932849",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "354cd2aeb0e3174b"
            ]
        ]
    },
    {
        "id": "9dd07e2f992da206",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst areaArray = data.Area\nconst levelArray = data.Level\nconst orderArray = data.Order\nconst buildingArray = data.Building\nconst dashboardArray = data.Dashboard\n\nmsg.payload = {\n    \"floor\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        levelArray: levelArray,\n        orderArray: orderArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "5f0ee2e85916b8b2",
                "8ee91f0e6ba9b10b"
            ]
        ]
    },
    {
        "id": "354cd2aeb0e3174b",
        "type": "function",
        "z": "ca30e93108932849",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "9dd07e2f992da206"
            ]
        ]
    },
    {
        "id": "8a0abd86505863d3",
        "type": "inject",
        "z": "ca30e93108932849",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Enter Floor Information Manually or Upload a CSV File",
        "payloadType": "str",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "38b8eb90bfc4b66b"
            ]
        ]
    },
    {
        "id": "f2d7f308df4eb4aa",
        "type": "chunks-to-lines",
        "z": "ca30e93108932849",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "c7b07becf7d121d0"
            ]
        ]
    },
    {
        "id": "1a9debf042d64e4b",
        "type": "ui_upload",
        "z": "ca30e93108932849",
        "group": "f195522f14542a1f",
        "title": "Upload a CSV of Floor Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 9,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "f2d7f308df4eb4aa"
            ]
        ]
    },
    {
        "id": "f7e8067ae763025d",
        "type": "ui_form",
        "z": "ca30e93108932849",
        "name": "",
        "label": "Floors Form",
        "group": "71c31779692d559d",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "floor.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description",
                "value": "floor.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area (SqFt)",
                "value": "floor.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Level",
                "value": "floor.levelArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Order",
                "value": "floor.orderArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Building",
                "value": "floor.buildingArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Dashboard",
                "value": "floor.dashboardArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "floor.nameArray": "",
            "floor.descriptionArray": "",
            "floor.areaArray": "",
            "floor.levelArray": "",
            "floor.orderArray": "",
            "floor.buildingArray": "",
            "floor.dashboardArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "197fcd866de68ebd"
            ]
        ]
    },
    {
        "id": "38b8eb90bfc4b66b",
        "type": "ui_text",
        "z": "ca30e93108932849",
        "group": "9ef342a5c89b8217",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "d35a8ee028283566",
        "type": "ui_table",
        "z": "ca30e93108932849",
        "group": "d1172758832a43a4",
        "name": "Floors Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1130,
        "y": 40,
        "wires": []
    },
    {
        "id": "f711822fb11f90b8",
        "type": "link out",
        "z": "ca30e93108932849",
        "name": "Global Floor Data",
        "mode": "link",
        "links": [
            "aa6876d5cbc60ccd"
        ],
        "x": 1185,
        "y": 100,
        "wires": []
    },
    {
        "id": "ffd1c24fd28ff003",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Equipment Array Mapping",
        "func": "const nameArray = msg.payload.equipment.nameArray\nconst floorArray = msg.payload.equipment.floorArray\nconst areaArray = msg.payload.equipment.areaArray\nconst descriptionArray = msg.payload.equipment.descriptionArray\nconst orderArray = msg.payload.equipment.orderArray\nconst buildingArray = msg.payload.equipment.buildingArray\nconst typeArray = msg.payload.equipment.typeArray\nconst subTypeArray = msg.payload.equipment.subTypeArray\nconst dashboardArray = msg.payload.equipment.dashboardArray\nconst idArray = msg.payload.equipment.idArray\nconst dNameArray = msg.payload.equipment.dNameArray\nconst dDArray = msg.payload.equipment.dDArray\n\nconst equipment = [...nameArray].map((element, index) => (\n    {\n        \"Equipment\": element, \n        \"Floor\": floorArray[index],\n        \"Area Served\": areaArray[index],\n        \"Type\": typeArray[index],\n        \"Sub Type\": subTypeArray[index],\n        \"Description\": descriptionArray[index],\n        \"Order\": orderArray[index],\n        \"Building\": buildingArray[index],\n        \"Dashboard\": dashboardArray[index],\n        \"Instance\": idArray[index],\n        \"Device Name\": dNameArray[index],\n        \"Device Description\": dDArray[index]\n        }))\n\nmsg.payload = equipment\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 40,
        "wires": [
            [
                "2a01fb809f236f4f"
            ]
        ]
    },
    {
        "id": "d6d5abd284dcbc3b",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload[\"equipment.nameArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar descriptionArray = payload[\"equipment.descriptionArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar orderArray = payload[\"equipment.orderArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload[\"equipment.areaArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar typeArray = payload[\"equipment.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar subTypeArray = payload[\"equipment.subTypeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar floorArray = payload['equipment.floorArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar buildingArray = payload['equipment.buildingArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar idArray = payload['equipment.idArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dNameArray = payload['equipment.dNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dDArray = payload['equipment.dDArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        floorArray: floorArray,\n        buildingArray: buildingArray,\n        idArray: idArray,\n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "ffd1c24fd28ff003",
                "1f6b5d674d04b4bf"
            ]
        ]
    },
    {
        "id": "d2e37ce48bfe110f",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Add Equipment to Floor in Site Tree",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar equipmentData = global.get('equipmentFloorData');\nconst buildingArray = equipmentData.equipment.buildingArray\nconst floorArray = equipmentData.equipment.floorArray\nconst nameArray = equipmentData.equipment.nameArray\nconst descriptionArray = equipmentData.equipment.descriptionArray\nconst orderArray = equipmentData.equipment.orderArray\nconst areaArray = equipmentData.equipment.areaArray\nconst subTypeArray = equipmentData.equipment.subTypeArray\nconst typeArray = equipmentData.equipment.typeArray\nconst dashboardArray = equipmentData.equipment.dashboardArray\nconst idArray = equipmentData.equipment.idArray\nconst dNameArray = equipmentData.equipment.dNameArray\nconst dDArray = equipmentData.equipment.dDArray\n\nvar plinkData = global.get('eqPlinkData');\nconst pointNameArray = plinkData.plink.pointNameArray\nconst pointDescriptionArray = plinkData.plink.pointDescriptionArray\nconst pTypeArray = plinkData.plink.typeArray\nconst instanceArray = plinkData.plink.instanceArray\nconst policyArray = plinkData.plink.policyArray\nconst groupArray = pTypeArray.map((value) => {\n  return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\nvar create_equipment =\n  nameArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"description\": descriptionArray[i],\n        \"order\": parseInt(orderArray[i]),\n        \"serves\": areaArray[i],\n        \"subtype\": subTypeArray[i],\n        \"type\": typeArray[i]\n      }\n    };\n  })\n\nvar equipment_details =\n  nameArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\"\n      }\n    };\n  })\n  \nvar create_device =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n    };\n  })\n\nvar device_details =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"local-name\": dNameArray[i],\n        \"description\": dDArray[i]\n      }\n    };\n  })\n\nvar create_points = [];\nidArray.map((x, i) => {\n  var url = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/add\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    create_points.push({\n      //id: String(i + 1),\n      url: url,\n      method: \"POST\",\n      body: {\n        \"object-type\": pTypeArray[i],\n        \"instance-number\": parseInt(instanceArray[i]),\n        \"name\": pointNameArray[i],\n        //\"description\": pointDescriptionArray[i],\n        //\"policy\": policyArray[i]\n      }\n    });\n  }\n})\n\nvar point_details = [];\nidArray.map((x, i) => {\n  var url2 = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    point_details.push({\n      //id: String(i + 1),\n      url: url2 + groupArray[i] + \"/\" + instanceArray[i],\n      method: \"POST\",\n      body: {\n        \"description\": pointDescriptionArray[i],\n        \"policy\": policyArray[i],\n      }\n    });\n  }\n})\n\nvar device_link =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i] + \"/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"path\": \"/services/bacnet/remote/devices/\" + idArray[i],\n      }\n    };\n  })\n\nconst requests = create_equipment.concat(equipment_details, create_device, device_details, create_points, point_details, device_link);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 640,
        "wires": [
            [
                "407687ea99747142",
                "809751493dd80a78"
            ]
        ]
    },
    {
        "id": "407687ea99747142",
        "type": "link out",
        "z": "c1515409031d41c3",
        "name": "Add Eq to Floor in Site Tree",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 1085,
        "y": 640,
        "wires": []
    },
    {
        "id": "0403017550f0952f",
        "type": "link in",
        "z": "c1515409031d41c3",
        "name": "Create Equipment In",
        "links": [
            "2cf080e9b7fe7b73"
        ],
        "x": 295,
        "y": 640,
        "wires": [
            [
                "d2e37ce48bfe110f"
            ]
        ]
    },
    {
        "id": "433d664f837fbb40",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "5eb4cf733052075c"
            ]
        ]
    },
    {
        "id": "5f72768925882a0a",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "433d664f837fbb40",
                "1d02b672f9692643"
            ]
        ]
    },
    {
        "id": "1d02b672f9692643",
        "type": "csv",
        "z": "c1515409031d41c3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "48e72cfd74f2edef"
            ]
        ]
    },
    {
        "id": "48e72cfd74f2edef",
        "type": "join",
        "z": "c1515409031d41c3",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "2aac99d0bf798d3e"
            ]
        ]
    },
    {
        "id": "f36c129214cdc164",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst orderArray = data.Order\nconst areaArray = data[\"Area Served\"]\nconst typeArray = data.Type\nconst subTypeArray = data.Subtype\nconst floorArray = data.Floor\nconst buildingArray = data.Building\nconst dashboardArray = data.Dashboard\nconst idArray = data[\"Device ID\"]\nconst dNameArray = data[\"Device Name\"]\nconst dDArray = data.Description\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        floorArray: floorArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray,\n        idArray: idArray,\n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "ffd1c24fd28ff003",
                "1f6b5d674d04b4bf"
            ]
        ]
    },
    {
        "id": "2aac99d0bf798d3e",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "f36c129214cdc164"
            ]
        ]
    },
    {
        "id": "285f8ab3742f191e",
        "type": "inject",
        "z": "c1515409031d41c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Add Equipment and Points at the Floor Level By Entering the Data Manually or Upload CSVs",
        "payloadType": "str",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "ae6bed8d5a6a84de"
            ]
        ]
    },
    {
        "id": "5eb4cf733052075c",
        "type": "chunks-to-lines",
        "z": "c1515409031d41c3",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "5f72768925882a0a"
            ]
        ]
    },
    {
        "id": "07daa02e51d683aa",
        "type": "ui_upload",
        "z": "c1515409031d41c3",
        "group": "4d20caa342aa8170",
        "title": "Upload a CSV of Equipment to Floor Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 14,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "5eb4cf733052075c"
            ]
        ]
    },
    {
        "id": "8b4c3c51d22ca68e",
        "type": "ui_form",
        "z": "c1515409031d41c3",
        "name": "Equipment to Floors",
        "label": "Equipment:",
        "group": "bc055bd9fc3bdac4",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Equipment (Ex. VAV200, VAV201, VAV301)",
                "value": "equipment.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description (Ex. Office-VAV, Cafe-VAV, Entry-VAV)",
                "value": "equipment.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Order (Ex. 1,2,1)",
                "value": "equipment.orderArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area Served (Ex. Room-200, Room-201, Room-301)",
                "value": "equipment.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Type (See Dropdown in BI)",
                "value": "equipment.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Subtype (Custom)",
                "value": "equipment.subTypeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Floors (Match the name in the Site Tree)",
                "value": "equipment.floorArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Buildings (Match the name in the Site Tree)",
                "value": "equipment.buildingArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Dashboard",
                "value": "equipment.dashboardArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device ID",
                "value": "equipment.idArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Name",
                "value": "equipment.dNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Description",
                "value": "equipment.dDArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "equipment.nameArray": "",
            "equipment.descriptionArray": "",
            "equipment.orderArray": "",
            "equipment.areaArray": "",
            "equipment.typeArray": "",
            "equipment.subTypeArray": "",
            "equipment.floorArray": "",
            "equipment.buildingArray": "",
            "equipment.dashboardArray": "",
            "equipment.idArray": "",
            "equipment.dNameArray": "",
            "equipment.dDArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "d6d5abd284dcbc3b"
            ]
        ]
    },
    {
        "id": "ae6bed8d5a6a84de",
        "type": "ui_text",
        "z": "c1515409031d41c3",
        "group": "9b768e4380b893b5",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "2a01fb809f236f4f",
        "type": "ui_table",
        "z": "c1515409031d41c3",
        "group": "2618ec148bee5326",
        "name": "Equipment Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1010,
        "y": 40,
        "wires": []
    },
    {
        "id": "39402b06ea85e1f3",
        "type": "link out",
        "z": "c1515409031d41c3",
        "name": "Global Equipment/Floor Data",
        "mode": "link",
        "links": [
            "a0a089d0d84382ee"
        ],
        "x": 1125,
        "y": 120,
        "wires": []
    },
    {
        "id": "178cc42b323b6b26",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar dlinkData = global.get('dlinkData');\nconst idArray = dlinkData.dlink.didArray\n\n\nvar typeArray = payload[\"plink.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar instanceArray = payload['plink.instanceArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointNameArray = payload['plink.pointNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointDescriptionArray = payload['plink.pointDescriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        typeArray: typeArray,\n        instanceArray: instanceArray,\n        pointNameArray: pointNameArray,\n        pointDescriptionArray: pointDescriptionArray,\n//        refArray: refArray,\n        groupArray: groupArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "7a757c1328ed9559",
                "a890c041908a991d"
            ]
        ]
    },
    {
        "id": "7a757c1328ed9559",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Point Link Array Mapping",
        "func": "const pointNameArray = msg.payload.plink.pointNameArray\nconst pointDescriptionArray = msg.payload.plink.pointDescriptionArray\nconst typeArray = msg.payload.plink.typeArray\nconst instanceArray = msg.payload.plink.instanceArray\n//const refArray = msg.payload.plink.refArray\nconst groupArray = msg.payload.plink.groupArray\n\nconst plink = [...pointNameArray].map((element, index) => (\n    {\n        \"Point Name\": element,\n        \"Point Description\": pointDescriptionArray[index],\n        \"Point Type\": typeArray[index],\n        \"Point Instance\": instanceArray[index],\n//        \"Reference path\": refArray[index],\n        \"Group\": groupArray[index],\n        }))\n\nmsg.payload = plink\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "1edd12e919d4b692"
            ]
        ]
    },
    {
        "id": "b067d3b905aeeb89",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 380,
        "wires": [
            [
                "fa8b4cf4db886920"
            ]
        ]
    },
    {
        "id": "06944ff24bc04d67",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "b067d3b905aeeb89",
                "9963299c4c10f075"
            ]
        ]
    },
    {
        "id": "9963299c4c10f075",
        "type": "csv",
        "z": "c1515409031d41c3",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "9ed306094f0a1873"
            ]
        ]
    },
    {
        "id": "9ed306094f0a1873",
        "type": "join",
        "z": "c1515409031d41c3",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 440,
        "wires": [
            [
                "afe59c12bd356fc7"
            ]
        ]
    },
    {
        "id": "165cf9e1f41bc125",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\n//var dlinkData = global.get('dlinkData');\n//const idArray = dlinkData.dlink.idArray\n\nconst pointNameArray = data.Name\nconst instanceArray = data.Instance\nconst typeArray = data.Type\nconst pointDescriptionArray = data.Description\nconst policyArray = data[\"Tuning Policy\"]\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        pointNameArray: pointNameArray,\n        instanceArray: instanceArray,\n        typeArray: typeArray,\n        pointDescriptionArray: pointDescriptionArray,\n        policyArray: policyArray,\n        groupArray: groupArray\n//        refArray: refArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 500,
        "wires": [
            [
                "7a757c1328ed9559",
                "a890c041908a991d"
            ]
        ]
    },
    {
        "id": "afe59c12bd356fc7",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 500,
        "wires": [
            [
                "165cf9e1f41bc125"
            ]
        ]
    },
    {
        "id": "fa8b4cf4db886920",
        "type": "chunks-to-lines",
        "z": "c1515409031d41c3",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "06944ff24bc04d67"
            ]
        ]
    },
    {
        "id": "6569156fe8be3b87",
        "type": "ui_upload",
        "z": "c1515409031d41c3",
        "group": "0d2fcdbfba00c8ab",
        "title": "Upload a CSV of Points",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 7,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 380,
        "wires": [
            [
                "fa8b4cf4db886920"
            ]
        ]
    },
    {
        "id": "fabe8e725248b59d",
        "type": "ui_form",
        "z": "c1515409031d41c3",
        "name": "",
        "label": "Points:",
        "group": "57e8190fe1eb0416",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Type (Ex. multiStateValue, binaryValue, analogValue)",
                "value": "plink.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Instance (Ex. [1, 2, 3]",
                "value": "plink.instanceArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Name (Ex. SpaceTemp, RoomTemp, SupplyTemp)",
                "value": "plink.pointNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Description (Ex. Space Temperature Sensor, Room Temperature Sensor, Supply Air Temperature Sensor)",
                "value": "plink.pointDescriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Tuning Policy",
                "value": "plinkData.bacnet.point.policyArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "plink.typeArray": "",
            "plink.instanceArray": "",
            "plink.pointNameArray": "",
            "plink.pointDescriptionArray": "",
            "plinkData.bacnet.point.policyArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 70,
        "y": 300,
        "wires": [
            [
                "178cc42b323b6b26"
            ]
        ]
    },
    {
        "id": "1edd12e919d4b692",
        "type": "ui_table",
        "z": "c1515409031d41c3",
        "group": "189071b20f1c2f3c",
        "name": "Point Link Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1140,
        "y": 300,
        "wires": []
    },
    {
        "id": "0a484e00fda95fb8",
        "type": "link out",
        "z": "c1515409031d41c3",
        "name": "Global PLink Data",
        "mode": "link",
        "links": [
            "12ba501b65d90bea"
        ],
        "x": 1195,
        "y": 340,
        "wires": []
    },
    {
        "id": "e9338a9ec8bdfd89",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Add Equipment to Floor in Site Tree",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar equipmentData = global.get('equipmentFloorData');\nconst buildingArray = equipmentData.equipment.buildingArray\nconst floorArray = equipmentData.equipment.floorArray\nconst nameArray = equipmentData.equipment.nameArray\nconst descriptionArray = equipmentData.equipment.descriptionArray\nconst orderArray = equipmentData.equipment.orderArray\nconst areaArray = equipmentData.equipment.areaArray\nconst subTypeArray = equipmentData.equipment.subTypeArray\nconst typeArray = equipmentData.equipment.typeArray\nconst dashboardArray = equipmentData.equipment.dashboardArray\nconst idArray = equipmentData.equipment.idArray\nconst dNameArray = equipmentData.equipment.dNameArray\nconst dDArray = equipmentData.equipment.dDArray\n\nvar plinkData = global.get('eqPlinkData');\nconst pointNameArray = plinkData.plink.pointNameArray\nconst pointDescriptionArray = plinkData.plink.pointDescriptionArray\nconst pTypeArray = plinkData.plink.typeArray\nconst instanceArray = plinkData.plink.instanceArray\nconst policyArray = plinkData.plink.policyArray\nconst groupArray = pTypeArray.map((value) => {\n  return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\nvar point_link = nameArray.flatMap((x, i) => {\n  return pointNameArray.map((z, j) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + x + \"/points/\" + z,\n      \"method\": \"POST\",\n      \"body\":\n      {\n        \"object-identifier\": groupArray[j],\n        \"instance-number\": parseInt(instanceArray[j]),\n        \"local-name\": z,\n        \"reference\": \"/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\" + groupArray[j] + \"/\" + instanceArray[j]\n      }\n    }\n  })\n});\n\nconst requests =  point_link\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "407687ea99747142"
            ]
        ]
    },
    {
        "id": "809751493dd80a78",
        "type": "delay",
        "z": "c1515409031d41c3",
        "name": "",
        "pauseType": "rate",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 740,
        "wires": [
            [
                "e9338a9ec8bdfd89"
            ]
        ]
    },
    {
        "id": "178d722766a29bb6",
        "type": "function",
        "z": "c1515409031d41c3",
        "name": "Add Equipment to Floor in Site Tree",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar equipmentData = global.get('equipmentFloorData');\nconst buildingArray = equipmentData.equipment.buildingArray\nconst floorArray = equipmentData.equipment.floorArray\nconst nameArray = equipmentData.equipment.nameArray\nconst descriptionArray = equipmentData.equipment.descriptionArray\nconst orderArray = equipmentData.equipment.orderArray\nconst areaArray = equipmentData.equipment.areaArray\nconst subTypeArray = equipmentData.equipment.subTypeArray\nconst typeArray = equipmentData.equipment.typeArray\nconst dashboardArray = equipmentData.equipment.dashboardArray\nconst idArray = equipmentData.equipment.idArray\nconst dNameArray = equipmentData.equipment.dNameArray\nconst dDArray = equipmentData.equipment.dDArray\n\nvar plinkData = global.get('eqPlinkData');\nconst pointNameArray = plinkData.plink.pointNameArray\nconst pointDescriptionArray = plinkData.plink.pointDescriptionArray\nconst pTypeArray = plinkData.plink.typeArray\nconst instanceArray = plinkData.plink.instanceArray\nconst policyArray = plinkData.plink.policyArray\nconst groupArray = pTypeArray.map((value) => {\n  return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\nvar create_equipment =\n  nameArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"description\": descriptionArray[i],\n        \"order\": parseInt(orderArray[i]),\n        \"serves\": areaArray[i],\n        \"subtype\": subTypeArray[i],\n        \"type\": typeArray[i]\n      }\n    };\n  })\n\nvar equipment_details =\n  nameArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\"\n      }\n    };\n  })\n  \nvar create_device =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n    };\n  })\n\nvar device_details =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"local-name\": dNameArray[i],\n        \"description\": dDArray[i]\n      }\n    };\n  })\n\nvar create_points = [];\nidArray.map((x, i) => {\n  var url = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/add\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    create_points.push({\n      //id: String(i + 1),\n      url: url,\n      method: \"POST\",\n      body: {\n        \"object-type\": pTypeArray[i],\n        \"instance-number\": parseInt(instanceArray[i]),\n        \"name\": pointNameArray[i],\n        //\"description\": pointDescriptionArray[i],\n        //\"policy\": policyArray[i]\n      }\n    });\n  }\n})\n\nvar point_details = [];\nidArray.map((x, i) => {\n  var url2 = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    point_details.push({\n      //id: String(i + 1),\n      url: url2 + groupArray[i] + \"/\" + instanceArray[i],\n      method: \"POST\",\n      body: {\n        \"description\": pointDescriptionArray[i],\n        \"policy\": policyArray[i],\n      }\n    });\n  }\n})\n\nvar device_link =\n  idArray.map((x, i) => {\n    return {\n      //\"id\": String(nameArray[x] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + nameArray[i] + \"/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"path\": \"/services/bacnet/remote/devices/\" + idArray[i],\n      }\n    };\n  })\n\nvar point_link = nameArray.flatMap((x, i) => {\n  return pointNameArray.map((z, j) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/equipment/\" + x + \"/points/\" + z,\n      \"method\": \"POST\",\n      \"body\":\n      {\n        \"object-identifier\": groupArray[j],\n        \"instance-number\": parseInt(instanceArray[j]),\n        \"local-name\": z,\n        \"reference\": \"/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\" + groupArray[j] + \"/\" + instanceArray[j]\n      }\n    }\n  })\n});\n\nconst requests = create_equipment.concat(equipment_details, create_device, device_details, create_points, point_details, device_link, point_link);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "d8f0eab6b966bc88",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Spaces Array Mapping",
        "func": "const nameArray = msg.payload.space.nameArray\nconst floorArray = msg.payload.space.floorArray\nconst areaArray = msg.payload.space.areaArray\nconst descriptionArray = msg.payload.space.descriptionArray\nconst orderArray = msg.payload.space.orderArray\nconst buildingArray = msg.payload.space.buildingArray\nconst dashboardArray = msg.payload.space.dashboardArray\n\n\nconst spaces = [...nameArray].map((element, index) => (\n    { \n        \"Space\": element,\n        \"Floor\": floorArray[index],\n        \"Area (Sq Ft)\": areaArray[index],\n        \"Description\": descriptionArray[index],\n        \"Order\": orderArray[index],\n        \"Building\": buildingArray[index],\n        \"Dashboard\": dashboardArray[index]\n        }))\n\nmsg.payload = spaces\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            [
                "588c6c701e6761b2"
            ]
        ]
    },
    {
        "id": "d484b98de4b7f2e9",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Add Spaces to Floors in Site Tree Batch",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar spacesData = global.get('spacesData');\nconst buildingArray = spacesData.space.buildingArray\nconst floorArray = spacesData.space.floorArray\nconst nameArray = spacesData.space.nameArray\nconst areaArray = spacesData.space.areaArray\nconst descriptionArray = spacesData.space.descriptionArray\nconst orderArray = spacesData.space.orderArray\nconst dashboardArray = spacesData.space.dashboardArray\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\nvar create =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"area\": parseInt(areaArray[i]),\n        \"description\": descriptionArray[i],\n        \"order\": parseInt(orderArray[i]),\n      }\n    };\n  })\n\nvar details =\n  nameArray.map((x, i) => {\n    return {\n      \"id\": String(nameArray[i] + 1),\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\",\n      }\n    };\n  })\n\nconst requests = create.concat(details);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 440,
        "wires": [
            [
                "a14dabbb64ed510b"
            ]
        ]
    },
    {
        "id": "85ccba3677bd9323",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload['spaces.nameArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar descriptionArray = payload['spaces.descriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload['spaces.areaArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar floorArray = payload['spaces.floorArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar orderArray = payload['spaces.orderArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar buildingArray = payload['spaces.buildingArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dashboardArray = payload['spaces.dashboardArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\n\nmsg.payload = {\n    \"space\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        floorArray: floorArray,\n        orderArray: orderArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "d8f0eab6b966bc88",
                "2e089059d3dcc786"
            ]
        ]
    },
    {
        "id": "c2a7eb1cf3416bdb",
        "type": "link in",
        "z": "7c9c4bac381bee44",
        "name": "Create Spaces In",
        "links": [
            "07aae2f662315203"
        ],
        "x": 195,
        "y": 440,
        "wires": [
            [
                "d484b98de4b7f2e9"
            ]
        ]
    },
    {
        "id": "a14dabbb64ed510b",
        "type": "link out",
        "z": "7c9c4bac381bee44",
        "name": "Add Spaces to Floors in Site Tree",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 935,
        "y": 440,
        "wires": []
    },
    {
        "id": "1344138eb05aee73",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "35d0b82171cbf029"
            ]
        ]
    },
    {
        "id": "e562f580b192147b",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "1344138eb05aee73",
                "3801b735c09e7169"
            ]
        ]
    },
    {
        "id": "3801b735c09e7169",
        "type": "csv",
        "z": "7c9c4bac381bee44",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "f1df7bebf50a4a58"
            ]
        ]
    },
    {
        "id": "f1df7bebf50a4a58",
        "type": "join",
        "z": "7c9c4bac381bee44",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 240,
        "wires": [
            [
                "427588f8c4cca394"
            ]
        ]
    },
    {
        "id": "b3f14e867bf9bbcb",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst areaArray = data.Area\nconst orderArray = data.Order\nconst floorArray = data.Floor\nconst buildingArray = data.Building\nconst dashboardArray = data.Dashboard\n\nmsg.payload = {\n    \"space\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        areaArray: areaArray,\n        orderArray: orderArray,\n        floorArray: floorArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 300,
        "wires": [
            [
                "d8f0eab6b966bc88",
                "2e089059d3dcc786"
            ]
        ]
    },
    {
        "id": "427588f8c4cca394",
        "type": "function",
        "z": "7c9c4bac381bee44",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 300,
        "wires": [
            [
                "b3f14e867bf9bbcb"
            ]
        ]
    },
    {
        "id": "8d6fa82880b4b55e",
        "type": "inject",
        "z": "7c9c4bac381bee44",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Enter Space Information Manually or Upload a CSV File",
        "payloadType": "str",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "b37e4876aeec3fe6"
            ]
        ]
    },
    {
        "id": "35d0b82171cbf029",
        "type": "chunks-to-lines",
        "z": "7c9c4bac381bee44",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "e562f580b192147b"
            ]
        ]
    },
    {
        "id": "77be982bb5a1d3f5",
        "type": "ui_upload",
        "z": "7c9c4bac381bee44",
        "group": "bcb1a9124ce89791",
        "title": "Upload a CSV of Space Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 9,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 180,
        "wires": [
            [
                "35d0b82171cbf029"
            ]
        ]
    },
    {
        "id": "0a6bdd13010cfa71",
        "type": "ui_form",
        "z": "7c9c4bac381bee44",
        "name": "",
        "label": "Space Information",
        "group": "16f26594cc8ed88a",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Space",
                "value": "spaces.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description",
                "value": "spaces.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area (SqFt)",
                "value": "spaces.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Order",
                "value": "spaces.orderArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Floor",
                "value": "spaces.floorArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Building",
                "value": "spaces.buildingArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Dashboard",
                "value": "spaces.dashboardArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "spaces.nameArray": "",
            "spaces.descriptionArray": "",
            "spaces.areaArray": "",
            "spaces.orderArray": "",
            "spaces.floorArray": "",
            "spaces.buildingArray": "",
            "spaces.dashboardArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "85ccba3677bd9323"
            ]
        ]
    },
    {
        "id": "b37e4876aeec3fe6",
        "type": "ui_text",
        "z": "7c9c4bac381bee44",
        "group": "ff5d80b13b3e6e4f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 630,
        "y": 360,
        "wires": []
    },
    {
        "id": "588c6c701e6761b2",
        "type": "ui_table",
        "z": "7c9c4bac381bee44",
        "group": "c60ea1bdb0f8cba0",
        "name": "Spaces Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1220,
        "y": 100,
        "wires": []
    },
    {
        "id": "6ce689ec65ad2715",
        "type": "link out",
        "z": "7c9c4bac381bee44",
        "name": "Global Space Data",
        "mode": "link",
        "links": [
            "7ac0677d1feffe54"
        ],
        "x": 1275,
        "y": 140,
        "wires": []
    },
    {
        "id": "1382b2581f5f2f0b",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Add Equipment to Spaces in Site Tree",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar equipmentData = global.get('equipmentSpaceData');\nconst buildingArray = equipmentData.equipment.buildingArray\nconst floorArray = equipmentData.equipment.floorArray\nconst spaceArray = equipmentData.equipment.spaceArray\nconst nameArray = equipmentData.equipment.nameArray\nconst descriptionArray = equipmentData.equipment.descriptionArray\nconst orderArray = equipmentData.equipment.orderArray\nconst areaArray = equipmentData.equipment.areaArray\nconst subTypeArray = equipmentData.equipment.subTypeArray\nconst typeArray = equipmentData.equipment.typeArray\nconst dashboardArray = equipmentData.equipment.dashboardArray\nconst idArray = equipmentData.equipment.idArray\nconst dNameArray = equipmentData.equipment.dNameArray\nconst dDArray = equipmentData.equipment.dDArray\n\nvar plinkData = global.get('spacesPlinkData');\nconst pointNameArray = plinkData.plink.pointNameArray\nconst pointDescriptionArray = plinkData.plink.pointDescriptionArray\nconst pTypeArray = plinkData.plink.typeArray\nconst instanceArray = plinkData.plink.instanceArray\nconst policyArray = plinkData.plink.policyArray\nconst groupArray = pTypeArray.map((value) => {\n  return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\nvar create_equipment =\n  nameArray.map((x, i) => {\n    return {  \n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + spaceArray[i] + \"/equipment/\" + nameArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"description\": descriptionArray[i],\n        \"order\": parseInt(orderArray[i]),\n        \"serves\": areaArray[i],\n        \"subtype\": subTypeArray[i],\n        \"type\": typeArray[i]\n      }\n    };\n  })\n\nvar equipment_details =\n  nameArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + spaceArray[i] + \"/equipment/\" + nameArray[i] + \"/dashboards/\" + dashboardArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"key\": dashboardArray[i],\n        \"display\": \"Default\"\n      }\n    };\n  })\n\nvar create_device =\n  idArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n    };\n  })\n\nvar device_details =\n  idArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"local-name\": dNameArray[i],\n        \"description\": dDArray[i]\n      }\n    };\n  })\n\nvar create_points = [];\nidArray.map((x, i) => {\n  var url = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/add\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    create_points.push({\n      //id: String(i + 1),\n      url: url,\n      method: \"POST\",\n      body: {\n        \"object-type\": pTypeArray[i],\n        \"instance-number\": parseInt(instanceArray[i]),\n        \"name\": pointNameArray[i],\n        //\"description\": pointDescriptionArray[i],\n        //\"policy\": policyArray[i]\n      }\n    });\n  }\n})\n\nvar point_details = [];\nidArray.map((x, i) => {\n  var url2 = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\"\n  for (let i = 0; i < pointNameArray.length; i++) {\n    point_details.push({\n      //id: String(i + 1),\n      url: url2 + groupArray[i] + \"/\" + instanceArray[i],\n      method: \"POST\",\n      body: {\n        \"description\": pointDescriptionArray[i],\n        \"policy\": policyArray[i],\n      }\n    });\n  }\n})\n\nvar device_link =\n  idArray.map((x, i) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + spaceArray[i] + \"/equipment/\" + nameArray[i] + \"/devices/\" + idArray[i],\n      \"method\": \"POST\",\n      \"body\": {\n        \"path\": \"/services/bacnet/remote/devices/\" + idArray[i],\n      }\n    };\n  })\n\nvar point_link = nameArray.flatMap((x, i) => {\n  return pointNameArray.map((z, j) => {\n    return {\n      \"url\": \"/api/rest/v2/services/site/buildings/\" + buildingArray[i] + \"/floors/\" + floorArray[i] + \"/spaces/\" + spaceArray[i] + \"/equipment/\" + nameArray[i] + \"/points/\" + z,\n      \"method\": \"POST\",\n      \"body\":\n      {\n        \"object-identifier\": groupArray[j],\n        \"instance-number\": parseInt(instanceArray[j]),\n        \"local-name\": z,\n        \"reference\": \"/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\" + groupArray[j] + \"/\" + instanceArray[j]\n      }\n    }\n  })\n});\n\nconst requests = create_equipment.concat(equipment_details, create_device, device_details, create_points, point_details, device_link, point_link);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "f77ee3e835a43f89"
            ]
        ]
    },
    {
        "id": "3012733556c636cc",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Equipment Array Mapping",
        "func": "const nameArray = msg.payload.equipment.nameArray\nconst floorArray = msg.payload.equipment.floorArray\nconst areaArray = msg.payload.equipment.areaArray\nconst descriptionArray = msg.payload.equipment.descriptionArray\nconst orderArray = msg.payload.equipment.orderArray\nconst buildingArray = msg.payload.equipment.buildingArray\nconst typeArray = msg.payload.equipment.typeArray\nconst subTypeArray = msg.payload.equipment.subTypeArray\nconst spaceArray = msg.payload.equipment.spaceArray\nconst dashboardArray = msg.payload.equipment.dashboardArray\nconst idArray = msg.payload.equipment.idArray\nconst dNameArray = msg.payload.equipment.dNameArray\nconst dDArray = msg.payload.equipment.dDArray\n\nconst equipment = [...nameArray].map((element, index) => (\n    {\n        \"Equipment\": element, \n        \"Space\": spaceArray[index],\n        \"Floor\": floorArray[index],\n        \"Area Served\": areaArray[index],\n        \"Type\": typeArray[index],\n        \"Sub Type\": subTypeArray[index],\n        \"Description\": descriptionArray[index],\n        \"Order\": orderArray[index],\n        \"Building\": buildingArray[index],\n        \"Dashboard\": dashboardArray[index],\n        \"Instance\": idArray[index],\n        \"Device Name\": dNameArray[index],\n        \"Device Description\": dDArray[index]\n    }))\n\nmsg.payload = equipment\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 60,
        "wires": [
            [
                "5039fc0bf99236f2"
            ]
        ]
    },
    {
        "id": "f5ae82a956ec772f",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload[\"equipment.nameArray\"].split(',').map(function(value){\n    return value.trim();\n});\n\nvar descriptionArray = payload[\"equipment.descriptionArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar orderArray = payload[\"equipment.orderArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar areaArray = payload[\"equipment.areaArray\"].split(',').map(function(value){\n    return value.trim();\n});\n\nvar typeArray = payload[\"equipment.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar subTypeArray = payload[\"equipment.subTypeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar spaceArray = payload['equipment.spaceArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar floorArray = payload['equipment.floorArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar buildingArray = payload['equipment.buildingArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar idArray = payload['equipment.idArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dNameArray = payload['equipment.dNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar dDArray = payload['equipment.dDArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        spaceArray: spaceArray,\n        floorArray: floorArray,\n        buildingArray: buildingArray,\n        idArray: idArray,\n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "3012733556c636cc",
                "12c5523889ffe098"
            ]
        ]
    },
    {
        "id": "f77ee3e835a43f89",
        "type": "link out",
        "z": "1967a61058fdb511",
        "name": "Add Eq to Spaces in Site Tree",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 965,
        "y": 660,
        "wires": []
    },
    {
        "id": "e8f568378342c46f",
        "type": "link in",
        "z": "1967a61058fdb511",
        "name": "Create Equipment In",
        "links": [
            "0e665f4576159b14"
        ],
        "x": 275,
        "y": 660,
        "wires": [
            [
                "1382b2581f5f2f0b"
            ]
        ]
    },
    {
        "id": "9e4c299c81709776",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            [
                "70073fef5eea7ba8"
            ]
        ]
    },
    {
        "id": "0ef2a1b76a15c1c2",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "9e4c299c81709776",
                "4b1eb1df24396fd0"
            ]
        ]
    },
    {
        "id": "4b1eb1df24396fd0",
        "type": "csv",
        "z": "1967a61058fdb511",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "102f45cdfac7d68c"
            ]
        ]
    },
    {
        "id": "102f45cdfac7d68c",
        "type": "join",
        "z": "1967a61058fdb511",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 200,
        "wires": [
            [
                "8a5ba6f1da8e6a61"
            ]
        ]
    },
    {
        "id": "c755e12042b1f162",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst descriptionArray = data.Description\nconst orderArray = data.Order\nconst areaArray = data[\"Area Served\"]\nconst typeArray = data.Type\nconst subTypeArray = data.Subtype\nconst spaceArray = data.Spaces\nconst floorArray = data.Floor\nconst buildingArray = data.Building\nconst dashboardArray = data.Dashboard\nconst idArray = data[\"Device ID\"]\nconst dNameArray = data[\"Device Name\"]\nconst dDArray = data.Description\n\nmsg.payload = {\n    \"equipment\": {\n        nameArray: nameArray,\n        descriptionArray: descriptionArray,\n        orderArray: orderArray,\n        areaArray: areaArray,\n        typeArray: typeArray,\n        subTypeArray: subTypeArray,\n        spaceArray: spaceArray,\n        floorArray: floorArray,\n        buildingArray: buildingArray,\n        dashboardArray: dashboardArray,\n        idArray: idArray,\n        dNameArray: dNameArray,\n        dDArray: dDArray,\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "3012733556c636cc",
                "12c5523889ffe098"
            ]
        ]
    },
    {
        "id": "8a5ba6f1da8e6a61",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "c755e12042b1f162"
            ]
        ]
    },
    {
        "id": "d7ee63913580e74f",
        "type": "inject",
        "z": "1967a61058fdb511",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Add Equipment and Points at the Space Level By Entering the Data Manually or Upload a CSV",
        "payloadType": "str",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "e6e571530a743c77"
            ]
        ]
    },
    {
        "id": "70073fef5eea7ba8",
        "type": "chunks-to-lines",
        "z": "1967a61058fdb511",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "0ef2a1b76a15c1c2"
            ]
        ]
    },
    {
        "id": "95e4306b0a6cf98d",
        "type": "ui_upload",
        "z": "1967a61058fdb511",
        "group": "a320da1730fb737b",
        "title": "Upload a CSV of Equipment to Space Data",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 14,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 140,
        "wires": [
            [
                "70073fef5eea7ba8"
            ]
        ]
    },
    {
        "id": "1fbf40d48318d4e8",
        "type": "ui_form",
        "z": "1967a61058fdb511",
        "name": "Equipment to Spaces",
        "label": "Equipment:",
        "group": "5461ae2be997ad35",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Equipment (Ex. VAV200, VAV201, VAV301)",
                "value": "equipment.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Description (Ex. Office-VAV, Cafe-VAV, Entry-VAV)",
                "value": "equipment.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Order (Ex. 1,2,1)",
                "value": "equipment.orderArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Area Served (Ex. Room-200, Room-201, Room-301)",
                "value": "equipment.areaArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Type (See Dropdown in BI)",
                "value": "equipment.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Subtype (Custom)",
                "value": "equipment.subTypeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Spaces (Match the name in the Site Tree)",
                "value": "equipment.spaceArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Floors (Match the name in the Site Tree)",
                "value": "equipment.floorArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Buildings (Match the name in the Site Tree)",
                "value": "equipment.buildingArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device ID",
                "value": "equipment.idArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Name",
                "value": "equipment.dNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Device Description",
                "value": "equipment.dDArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "equipment.nameArray": "",
            "equipment.descriptionArray": "",
            "equipment.orderArray": "",
            "equipment.areaArray": "",
            "equipment.typeArray": "",
            "equipment.subTypeArray": "",
            "equipment.spaceArray": "",
            "equipment.floorArray": "",
            "equipment.buildingArray": "",
            "equipment.idArray": "",
            "equipment.dNameArray": "",
            "equipment.dDArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "f5ae82a956ec772f"
            ]
        ]
    },
    {
        "id": "e6e571530a743c77",
        "type": "ui_text",
        "z": "1967a61058fdb511",
        "group": "aeebac2164898705",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 310,
        "y": 100,
        "wires": []
    },
    {
        "id": "5039fc0bf99236f2",
        "type": "ui_table",
        "z": "1967a61058fdb511",
        "group": "131cb1262fa32f5e",
        "name": "Equipment Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1010,
        "y": 60,
        "wires": []
    },
    {
        "id": "33f6a2fde5ea7944",
        "type": "link out",
        "z": "1967a61058fdb511",
        "name": "Global Equipment/Space Data",
        "mode": "link",
        "links": [
            "738235258014828d"
        ],
        "x": 1165,
        "y": 100,
        "wires": []
    },
    {
        "id": "973014bcb2ed0f77",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar dlinkData = global.get('dlinkData');\nconst idArray = dlinkData.dlink.didArray\n\n\nvar typeArray = payload[\"plink.typeArray\"].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar instanceArray = payload['plink.instanceArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointNameArray = payload['plink.pointNameArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar pointDescriptionArray = payload['plink.pointDescriptionArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        typeArray: typeArray,\n        instanceArray: instanceArray,\n        pointNameArray: pointNameArray,\n        pointDescriptionArray: pointDescriptionArray,\n//        refArray: refArray,\n        groupArray: groupArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "17ccca113104aa65",
                "1748baaf7d8b17e5"
            ]
        ]
    },
    {
        "id": "17ccca113104aa65",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Point Link Array Mapping",
        "func": "const pointNameArray = msg.payload.plink.pointNameArray\nconst pointDescriptionArray = msg.payload.plink.pointDescriptionArray\nconst typeArray = msg.payload.plink.typeArray\nconst instanceArray = msg.payload.plink.instanceArray\n//const refArray = msg.payload.plink.refArray\nconst groupArray = msg.payload.plink.groupArray\n\nconst plink = [...pointNameArray].map((element, index) => (\n    {\n        \"Point Name\": element,\n        \"Point Description\": pointDescriptionArray[index],\n        \"Point Type\": typeArray[index],\n        \"Point Instance\": instanceArray[index],\n//        \"Reference path\": refArray[index],\n        \"Group\": groupArray[index],\n        }))\n\nmsg.payload = plink\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 320,
        "wires": [
            [
                "a01c3fe5032cf3d3"
            ]
        ]
    },
    {
        "id": "4e846ed7f49c148c",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "b1a1c2505c75ab1d"
            ]
        ]
    },
    {
        "id": "337d2f883c18269d",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 400,
        "wires": [
            [
                "4e846ed7f49c148c",
                "9d4103d52d8ebe63"
            ]
        ]
    },
    {
        "id": "9d4103d52d8ebe63",
        "type": "csv",
        "z": "1967a61058fdb511",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "c396dd28fc120964"
            ]
        ]
    },
    {
        "id": "c396dd28fc120964",
        "type": "join",
        "z": "1967a61058fdb511",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 460,
        "wires": [
            [
                "96522e79c96e7362"
            ]
        ]
    },
    {
        "id": "31803e171b2a407f",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\n//var dlinkData = global.get('dlinkData');\n//const idArray = dlinkData.dlink.idArray\n\nconst pointNameArray = data.Name\nconst instanceArray = data.Instance\nconst typeArray = data.Type\nconst pointDescriptionArray = data.Description\nconst policyArray = data[\"Tuning Policy\"]\n\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n});\n\n//const refArray = idArray.map((didArray, index) => {\n//    return `/services/bacnet/remote/devices/${didArray}/objects/${groupArray[index]}/${instanceArray[index]}`;\n//});\n\nmsg.payload = {\n    \"plink\": {\n        pointNameArray: pointNameArray,\n        instanceArray: instanceArray,\n        typeArray: typeArray,\n        pointDescriptionArray: pointDescriptionArray,\n        policyArray: policyArray,\n        groupArray: groupArray\n//        refArray: refArray\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 520,
        "wires": [
            [
                "17ccca113104aa65",
                "1748baaf7d8b17e5"
            ]
        ]
    },
    {
        "id": "96522e79c96e7362",
        "type": "function",
        "z": "1967a61058fdb511",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "31803e171b2a407f"
            ]
        ]
    },
    {
        "id": "b1a1c2505c75ab1d",
        "type": "chunks-to-lines",
        "z": "1967a61058fdb511",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 400,
        "wires": [
            [
                "337d2f883c18269d"
            ]
        ]
    },
    {
        "id": "8fd48cb881f9245b",
        "type": "ui_upload",
        "z": "1967a61058fdb511",
        "group": "2f9c6837ce20b5ba",
        "title": "Upload a CSV of Points",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 7,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 400,
        "wires": [
            [
                "b1a1c2505c75ab1d"
            ]
        ]
    },
    {
        "id": "d27c4e02a9f45d31",
        "type": "ui_form",
        "z": "1967a61058fdb511",
        "name": "",
        "label": "Points:",
        "group": "f0652ae5cad74bc3",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Type (Ex. multiStateValue, binaryValue, analogValue)",
                "value": "plink.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Instance (Ex. [1, 2, 3]",
                "value": "plink.instanceArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Name (Ex. SpaceTemp, RoomTemp, SupplyTemp)",
                "value": "plink.pointNameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Description (Ex. Space Temperature Sensor, Room Temperature Sensor, Supply Air Temperature Sensor)",
                "value": "plink.pointDescriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Tuning Policy",
                "value": "plinkData.bacnet.point.policyArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "plink.typeArray": "",
            "plink.instanceArray": "",
            "plink.pointNameArray": "",
            "plink.pointDescriptionArray": "",
            "plinkData.bacnet.point.policyArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 70,
        "y": 320,
        "wires": [
            [
                "973014bcb2ed0f77"
            ]
        ]
    },
    {
        "id": "a01c3fe5032cf3d3",
        "type": "ui_table",
        "z": "1967a61058fdb511",
        "group": "e7b53b20087cf053",
        "name": "Point Link Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1140,
        "y": 320,
        "wires": []
    },
    {
        "id": "120b2a925f4d1137",
        "type": "link out",
        "z": "1967a61058fdb511",
        "name": "Global PLink Data",
        "mode": "link",
        "links": [
            "543a23bc4e0537e9"
        ],
        "x": 1195,
        "y": 360,
        "wires": []
    },
    {
        "id": "a0c793d5a4c81ee9",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Devices Array Mapping",
        "func": "const idArray = msg.payload.bacnet.device.idArray\nconst nameArray = msg.payload.bacnet.device.nameArray\nconst descriptionArray = msg.payload.bacnet.device.descriptionArray\n\nconst devices = [...idArray].map((element, index) => (\n    { \"Device ID\": element,\n    \"Name\": nameArray[index],\n    \"Description\": descriptionArray[index]\n    }))\n\nmsg.payload = devices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "af749d19592cdd36"
            ]
        ]
    },
    {
        "id": "8131c0cd8d6921b6",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nidArray.forEach((x, i) => {\n  var createMsg = {};\n\n    createMsg.id = \"1\";\n    createMsg.method = \"POST\";\n    createMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/services/bacnet/remote/devices/\" + x;\n    createMsg.headers = {};\n    createMsg.headers['authorization'] = 'basic ' + base64;\n    createMsg.headers['Content-Type'] = \"application/JSON\";\n  var body =\n  {\n    \"local-name\": nameArray[i],\n    \"description\": descriptionArray[i],\n  }\n  createMsg.payload = body;\n  node.send(createMsg);\n\n  var detailMsg = {};\n\n  detailMsg.id = \"2\";\n  detailMsg.method = \"POST\";\n  detailMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/services/bacnet/remote/devices/\" + x;\n  detailMsg.headers = {};\n  detailMsg.headers['authorization'] = 'basic ' + base64;\n  detailMsg.headers['Content-Type'] = \"application/JSON\";\n\n  detailMsg.payload = body;\n  node.send(detailMsg);\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "f21bd66087308795",
        "type": "link out",
        "z": "7da51f1cf2747c71",
        "name": "Create/Duplicate Devices",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 995,
        "y": 460,
        "wires": []
    },
    {
        "id": "5793f3e79c18b8ef",
        "type": "link in",
        "z": "7da51f1cf2747c71",
        "name": "Create Devices In",
        "links": [
            "bb8fd8a7625d6278"
        ],
        "x": 195,
        "y": 440,
        "wires": [
            [
                "f013d95eaa8afafd"
            ]
        ]
    },
    {
        "id": "93a47743b402147d",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Duplicate Remote Device",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar duplicateData = global.get('duplicateData');\nconst source = parseInt(duplicateData.bacnet.device.duplicate.source)\nconst start = parseInt(duplicateData.bacnet.device.duplicate.start)\nconst count = parseInt(duplicateData.bacnet.device.duplicate.count)\nconst step = parseInt(duplicateData.bacnet.device.duplicate.step)\n  var createMsg = {};\n\n    createMsg.id = \"1\";\n    createMsg.method = \"POST\";\n    createMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/services/bacnet/remote/devices/duplicate-device\";\n    createMsg.headers = {};\n    createMsg.headers['authorization'] = 'basic ' + base64;\n    createMsg.headers['Content-Type'] = \"application/JSON\";\n\n  var body =\n  {\n    \"source-instance-id\": source,\n    \"start-instance-id\": start,\n    \"count\": count,\n    \"step\": step,\n  };\n  createMsg.payload = body;\n  node.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "f21bd66087308795"
            ]
        ]
    },
    {
        "id": "4a0c6742abd72873",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Devices Array Mapping",
        "func": "const sourceArray = msg.payload.bacnet.device.duplicate.source\nconst startArray = msg.payload.bacnet.device.duplicate.start\nconst countArray = msg.payload.bacnet.device.duplicate.count\nconst stepArray = msg.payload.bacnet.device.duplicate.step\n\nconst devices = [...sourceArray].map((element, index) => (\n    { \"Source\": element,\n    \"Start\": startArray[index],\n    \"Count\": countArray[index],\n    \"Step\": stepArray[index]\n    }))\n\nmsg.payload = devices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "9d2ec7fec269d161"
            ]
        ]
    },
    {
        "id": "2f354f33b14d7b32",
        "type": "link in",
        "z": "7da51f1cf2747c71",
        "name": "Duplicate Devices In",
        "links": [
            "e6481bc978634c8f"
        ],
        "x": 195,
        "y": 480,
        "wires": [
            [
                "93a47743b402147d"
            ]
        ]
    },
    {
        "id": "c4805270.8a1ce8",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar idArray = payload['bacnet.device.idArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar nameArray = payload['bacnet.device.nameArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar descriptionArray = payload['bacnet.device.descriptionArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nmsg.payload = {\n    \"bacnet\": {\n        \"device\": {\n            idArray: idArray,\n            nameArray: nameArray,\n            descriptionArray: descriptionArray\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 40,
        "wires": [
            [
                "a0c793d5a4c81ee9",
                "b5d21ed921c72fa6"
            ]
        ]
    },
    {
        "id": "d6cc6e02b105e86e",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar source = payload['bacnet.device.duplicate.source'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar start = payload['bacnet.device.duplicate.start'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar count = payload['bacnet.device.duplicate.count'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar step = payload['bacnet.device.duplicate.step'].split(',').map(function (value) {\n    return value.trim();\n});\n\nmsg.payload = {\n    \"bacnet\": {\n        \"device\": {\n            \"duplicate\": {\n                source: source,\n                start: start,\n                count: count,\n                step: step\n            }\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "4a0c6742abd72873",
                "6180abb6a76d5f7a"
            ]
        ]
    },
    {
        "id": "216141160e691da4",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 240,
        "wires": [
            [
                "f585287c7295a60c"
            ]
        ]
    },
    {
        "id": "cbec89f00fd48ae9",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "216141160e691da4",
                "e705e97cfe9428fc"
            ]
        ]
    },
    {
        "id": "e705e97cfe9428fc",
        "type": "csv",
        "z": "7da51f1cf2747c71",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "72e96a54cc226336"
            ]
        ]
    },
    {
        "id": "72e96a54cc226336",
        "type": "join",
        "z": "7da51f1cf2747c71",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 700,
        "y": 300,
        "wires": [
            [
                "b94b8765d2e3bece"
            ]
        ]
    },
    {
        "id": "38a83597c4dc6437",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst idArray = data[\"Device ID\"]\nconst descriptionArray = data.Description\n\nmsg.payload = {\n    \"bacnet\": {\n        \"device\": {\n            nameArray: nameArray,\n            idArray: idArray,\n            descriptionArray: descriptionArray,\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "a0c793d5a4c81ee9",
                "b5d21ed921c72fa6"
            ]
        ]
    },
    {
        "id": "b94b8765d2e3bece",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "38a83597c4dc6437"
            ]
        ]
    },
    {
        "id": "63f6b22edd581825",
        "type": "debug",
        "z": "7da51f1cf2747c71",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1020,
        "wires": []
    },
    {
        "id": "845c43b086efc620",
        "type": "http request",
        "z": "7da51f1cf2747c71",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://10.168.15.2/api/rest/v2/batch",
        "tls": "340fe7c22ea79570",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 980,
        "wires": [
            [
                "8152d6c47e91a44a"
            ]
        ]
    },
    {
        "id": "8152d6c47e91a44a",
        "type": "json",
        "z": "7da51f1cf2747c71",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 990,
        "y": 980,
        "wires": [
            [
                "e13f06eab8aade9d"
            ]
        ]
    },
    {
        "id": "e13f06eab8aade9d",
        "type": "debug",
        "z": "7da51f1cf2747c71",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 980,
        "wires": []
    },
    {
        "id": "05dc792298df3c57",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices Batch",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst numArray = idArray.map((obj, index) => index);\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nconst baseUrl = \"https://\" + ipaddr + \"/api/rest/v2/batch\"\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\n    var requests = \n    idArray.map((x, i) => {\n      return {\n        \"id\": String(numArray[i] + 1),\n        \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n        \"method\": \"POST\",\n        //\"headers\": \n          //{\n            //\"content-Type\": \"application/json\"\n          //},\n        \"body\": \n          {\n            \"local-name\": nameArray[i],\n            \"description\": descriptionArray[i],\n          }\n      };\n    })\ncreateMsg.payload = {\n      requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "bbdae6736544daf8",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices Batch",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst numArray = idArray.map((obj, index) => index);\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nconst baseUrl = \"https://\" + ipaddr + \"/api/rest/v2/batch\"\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\n    var requests = \n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n        };\n      })\n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n          \"body\": {\n            \"local-name\": nameArray[i],\n            \"description\": descriptionArray[i]\n          }\n        };\n      })\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "63f6b22edd581825"
            ]
        ]
    },
    {
        "id": "7baa32c8a1c6b873",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices Batch",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst numArray = idArray.map((obj, index) => index);\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nconst baseUrl = \"https://\" + ipaddr + \"/api/rest/v2/batch\"\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\n    var requests = \n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n        };\n      })\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\n\n    var requests =\n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n          \"body\": {\n          \"local-name\": nameArray[i],\n          \"description\": descriptionArray[i]\n          }\n    };\n})\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "13760ad9df465319",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices Batch",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst numArray = idArray.map((obj, index) => index);\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nconst baseUrl = \"https://\" + ipaddr + \"/api/rest/v2/batch\"\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\n    var requests = \n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n        };\n      })\n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n          \"body\": {\n            \"local-name\": nameArray[i],\n            \"description\": descriptionArray[i]\n          }\n        };\n      })\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f013d95eaa8afafd",
        "type": "function",
        "z": "7da51f1cf2747c71",
        "name": "Create Remote BACNet Devices Batch",
        "func": "var biData = global.get('biData');\n\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('deviceData');\nconst idArray = deviceData.bacnet.device.idArray\nconst numArray = idArray.map((obj, index) => index);\nconst nameArray = deviceData.bacnet.device.nameArray\nconst descriptionArray = deviceData.bacnet.device.descriptionArray\n\nconst baseUrl = \"https://\" + ipaddr + \"/api/rest/v2/batch\"\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\n    var create = \n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n        };\n      })\n\n    var details =\n      idArray.map((x, i) => {\n        return {\n          \"id\": String(numArray[i] + 1),\n          \"url\": \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i],\n          \"method\": \"POST\",\n          \"body\": {\n            \"local-name\": nameArray[i],\n            \"description\": descriptionArray[i]\n          }\n    };\n})\n\nconst requests = create.concat(details);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "f21bd66087308795"
            ]
        ]
    },
    {
        "id": "f585287c7295a60c",
        "type": "chunks-to-lines",
        "z": "7da51f1cf2747c71",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "cbec89f00fd48ae9"
            ]
        ]
    },
    {
        "id": "57a6542c4d3c66bc",
        "type": "ui_upload",
        "z": "7da51f1cf2747c71",
        "group": "61005177a1f4f1ba",
        "title": "Upload CSV of your Devices",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "chunk": "512",
        "transfer": "binary",
        "x": 50,
        "y": 240,
        "wires": [
            [
                "f585287c7295a60c"
            ]
        ]
    },
    {
        "id": "73303cfa4cccb73f",
        "type": "ui_form",
        "z": "7da51f1cf2747c71",
        "name": "",
        "label": "Manually Enter Your Device Information -Seperate Each by a Comma and Space",
        "group": "798f6acc339ea0c0",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Device ID (Ex 1001, 1002, 1003, ...)",
                "value": "bacnet.device.idArray",
                "type": "multiline",
                "required": true,
                "rows": 1
            },
            {
                "label": "Device Name (Ex VAV-01, VAV-02, VAV-03, ...)",
                "value": "bacnet.device.nameArray",
                "type": "multiline",
                "required": true,
                "rows": 1
            },
            {
                "label": "Device Description (Ex VAV with Reheat, Cooling Only VAV, Fan Powered Box, ...)",
                "value": "bacnet.device.descriptionArray",
                "type": "multiline",
                "required": true,
                "rows": 1
            }
        ],
        "formValue": {
            "bacnet.device.idArray": "",
            "bacnet.device.nameArray": "",
            "bacnet.device.descriptionArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 300,
        "y": 40,
        "wires": [
            [
                "c4805270.8a1ce8"
            ]
        ]
    },
    {
        "id": "b9df6f7e48a90e8d",
        "type": "ui_form",
        "z": "7da51f1cf2747c71",
        "name": "",
        "label": "BACNet Duplicate Form",
        "group": "1eeab51532883ecc",
        "order": 1,
        "width": 15,
        "height": 1,
        "options": [
            {
                "label": "Device ID Source",
                "value": "bacnet.device.duplicate.source",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Device ID # Start",
                "value": "bacnet.device.duplicate.start",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Count",
                "value": "bacnet.device.duplicate.count",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Step",
                "value": "bacnet.device.duplicate.step",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "bacnet.device.duplicate.source": "",
            "bacnet.device.duplicate.start": "",
            "bacnet.device.duplicate.count": "",
            "bacnet.device.duplicate.step": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "d6cc6e02b105e86e"
            ]
        ]
    },
    {
        "id": "af749d19592cdd36",
        "type": "ui_table",
        "z": "7da51f1cf2747c71",
        "group": "b4438a213cf74446",
        "name": "BACNet Devices Table",
        "order": 3,
        "width": 26,
        "height": 10,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1000,
        "y": 180,
        "wires": []
    },
    {
        "id": "9d2ec7fec269d161",
        "type": "ui_table",
        "z": "7da51f1cf2747c71",
        "group": "e81150a8478bfea6",
        "name": "BACNet Duplicate Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "3e39d409b81ace48",
        "type": "link out",
        "z": "7da51f1cf2747c71",
        "name": "Global Device Data",
        "mode": "link",
        "links": [
            "ac16122fdef16a3f"
        ],
        "x": 1375,
        "y": 240,
        "wires": []
    },
    {
        "id": "6180abb6a76d5f7a",
        "type": "link out",
        "z": "7da51f1cf2747c71",
        "name": "Global Dupilcate Device Data",
        "mode": "link",
        "links": [
            "83d40ae6e0db2ed0"
        ],
        "x": 525,
        "y": 80,
        "wires": []
    },
    {
        "id": "be0cf9bd949a36ad",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Points Array Mapping",
        "func": "\nconst instanceArray = msg.payload.bacnet.point.instanceArray\nconst typeArray = msg.payload.bacnet.point.typeArray\nconst nameArray = msg.payload.bacnet.point.nameArray\nconst descriptionArray = msg.payload.bacnet.point.descriptionArray\nconst policyArray = msg.payload.bacnet.point.policyArray\n\nconst points = [...instanceArray].map((element, index) => (\n    {\n        \"Instance\": element,\n        \"Type\": typeArray[index],\n        \"Name\": nameArray[index],\n        \"Description\": descriptionArray[index],\n        \"Tuning Policy\": policyArray[index]\n    }))\n\nmsg.payload = points\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 60,
        "wires": [
            [
                "b9be5f0f216058da"
            ]
        ]
    },
    {
        "id": "74c809eb8fb342db",
        "type": "link out",
        "z": "33cf6bb92a970f36",
        "name": "Create Remote BACNet Points",
        "mode": "link",
        "links": [
            "7ca76781a75ce390"
        ],
        "x": 1125,
        "y": 380,
        "wires": []
    },
    {
        "id": "613a674a2c5dc512",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Convert to Arrays",
        "func": "var payload = msg.payload;\n\nvar nameArray = payload['bacnet.point.nameArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar instanceArray = payload['bacnet.point.instanceArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar typeArray = payload['bacnet.point.typeArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar descriptionArray = payload['bacnet.point.descriptionArray'].split(',').map(function(value){\n    return value.trim();\n});\n\nvar policyArray = payload['bacnet.point.policyArray'].split(',').map(function (value) {\n    return value.trim();\n});\n\nvar groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\");\n\n});\n\nvar groupArray = typeArray.map((input) => {\n    return input.replace(\"Input\", \"-inputs\");\n\n});\n\nmsg.payload = {\n    \"bacnet\": {\n        \"point\": {\n            nameArray: nameArray,\n            instanceArray: instanceArray,\n            typeArray: typeArray,\n            descriptionArray: descriptionArray,\n            policyArray: policyArray,\n            groupArray: groupArray\n        }\n    }\n};\nreturn msg;\n\n//bacnet.point.nameArray\n//bacnet.point.instanceArray\n//bacnet.point.typeArray\n//bacnet.point.descriptionArray\n//bacnet.point.policyArray",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "be0cf9bd949a36ad",
                "f63e1c3c9b6cdfd5"
            ]
        ]
    },
    {
        "id": "29c11df262124d2b",
        "type": "link in",
        "z": "33cf6bb92a970f36",
        "name": "Create Points In",
        "links": [
            "d8e4f882c2c41f2a"
        ],
        "x": 185,
        "y": 380,
        "wires": [
            [
                "42c927890d6f6e14"
            ]
        ]
    },
    {
        "id": "66522e42.8bcad8",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Ready for next lines",
        "func": "return { tick: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "bee114bf.4db708"
            ]
        ]
    },
    {
        "id": "267c2710.c562f",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "DoSomething",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "66522e42.8bcad8",
                "e4fda147cb7a2115"
            ]
        ]
    },
    {
        "id": "e4fda147cb7a2115",
        "type": "csv",
        "z": "33cf6bb92a970f36",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "91d1c2eb43605171"
            ]
        ]
    },
    {
        "id": "91d1c2eb43605171",
        "type": "join",
        "z": "33cf6bb92a970f36",
        "name": "Join Together with the Band",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.Instance",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 220,
        "wires": [
            [
                "900ed98ce9d43c59"
            ]
        ]
    },
    {
        "id": "0ac664ccb040c04a",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Convert to Object: BACNet:Point",
        "func": "const data = msg.payload\n\nconst nameArray = data.Name\nconst instanceArray = data.Instance\nconst typeArray = data.Type\nconst descriptionArray = data.Description\nconst policyArray = data[\"Tuning Policy\"]\nconst groupArray = typeArray.map((value) => {\n    return value.replace(\"Value\", \"-values\").replace(\"Input\", \"-inputs\").replace(\"Output\", \"-outputs\").replace(\"State\", \"-state\");\n});\n\nmsg.payload = {\n    \"bacnet\": {\n        \"point\": {\n            nameArray: nameArray,\n            instanceArray: instanceArray,\n            typeArray: typeArray,\n            descriptionArray: descriptionArray,\n            policyArray: policyArray,\n            groupArray: groupArray\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "be0cf9bd949a36ad",
                "f63e1c3c9b6cdfd5"
            ]
        ]
    },
    {
        "id": "900ed98ce9d43c59",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Organize into Arrays",
        "func": "const data = msg.payload\n\nconst objects = {};\n\ndata.forEach(item => {\n    Object.keys(item).forEach(key => {\n        if (!objects[key]) {\n            objects[key] = [];\n        }\n        objects[key].push(item[key]);\n    });\n});\n\nmsg.payload = objects\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "0ac664ccb040c04a"
            ]
        ]
    },
    {
        "id": "09d0b81edb018773",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "List",
        "func": "var start = msg.payload[\"bacnet.startArray\"]\nvar end = msg.payload[\"bacnet.finishArray\"]\n\nvar rangeArray = Array.from({ length: end - start + 1 }, (_, i) => ({ number: start + i }));\n\nmsg.payload = rangeArray;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "4036746ec15587bf"
            ]
        ]
    },
    {
        "id": "4036746ec15587bf",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Convert to Arrays",
        "func": "const inputArray = msg.payload\n\nconst idArray = inputArray.map(obj => obj.number);\n\nmsg.payload = {\n    \"bacnet\": {\n        \"device\": {\n            idArray: idArray\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "0a855768ccaf85c3"
            ]
        ]
    },
    {
        "id": "42c927890d6f6e14",
        "type": "function",
        "z": "33cf6bb92a970f36",
        "name": "Create Remote BACNet Points",
        "func": "var biData = global.get('biData');\nvar ipaddr = biData.ipaddr[0]\nvar user = biData.user[0]\nvar password = biData.password[0]\nvar credentials = user + \":\" + password\nvar base64 = new Buffer(credentials).toString('base64')\n\nvar deviceData = global.get('devicePointsData');\nvar idArray = deviceData.bacnet.device.idArray\n\nvar pointsData = global.get('pointsData');\nconst nameArray = pointsData.bacnet.point.nameArray\nconst instanceArray = pointsData.bacnet.point.instanceArray\nconst typeArray = pointsData.bacnet.point.typeArray\nconst descriptionArray = pointsData.bacnet.point.descriptionArray\nconst groupArray = pointsData.bacnet.point.groupArray\nconst policyArray = pointsData.bacnet.point.policyArray\n\nvar createMsg = {};\n\ncreateMsg.id = \"1\";\ncreateMsg.method = \"POST\";\ncreateMsg.url = \"https://\" + ipaddr + \"/api/rest/v2/batch\";\ncreateMsg.headers = {};\ncreateMsg.headers['authorization'] = 'basic ' + base64;\ncreateMsg.headers['Content-Type'] = \"application/JSON\";\n\n\nvar create = [];\n  idArray.map((x, i) => {\n    var url = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/add\"\n    for (let i = 0; i < nameArray.length; i++) {\n      create.push({\n        id: String(i + 1),\n        url: url,\n        method: \"POST\",\n        body: {\n          \"object-type\": typeArray[i],\n          \"instance-number\": parseInt(instanceArray[i]),\n          \"name\": nameArray[i],\n          \"description\": descriptionArray[i],\n          \"policy\": policyArray[i]\n          }\n      });\n    }\n  })\n\nvar detail = [];\n  idArray.map((x, i) => {\n    var url2 = \"/api/rest/v2/services/bacnet/remote/devices/\" + idArray[i] + \"/objects/\"\n    for (let i = 0; i < nameArray.length; i++) {\n    detail.push({\n      id: String(i + 1),\n      url: url2 + groupArray[i] + \"/\" + instanceArray[i],\n      method: \"POST\",\n      body: {\n        \"description\": descriptionArray[i],\n        \"policy\": policyArray[i],\n      }\n    });\n  }\n})\nconst requests = create.concat(detail);\n\ncreateMsg.payload = {\n  requests\n}\nnode.send(createMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "74c809eb8fb342db"
            ]
        ]
    },
    {
        "id": "bee114bf.4db708",
        "type": "chunks-to-lines",
        "z": "33cf6bb92a970f36",
        "name": "",
        "nbLines": "",
        "decoder": "UTF-8",
        "x": 260,
        "y": 160,
        "wires": [
            [
                "267c2710.c562f"
            ]
        ]
    },
    {
        "id": "4a4aced97b0f7c25",
        "type": "ui_upload",
        "z": "33cf6bb92a970f36",
        "group": "256d6a4d3a1ca036",
        "title": "Upload a CSV of Points",
        "accept": "",
        "name": "",
        "order": 1,
        "width": 13,
        "height": 6,
        "chunk": "512",
        "transfer": "binary",
        "x": 70,
        "y": 160,
        "wires": [
            [
                "bee114bf.4db708"
            ]
        ]
    },
    {
        "id": "f3cdbf27e60545fc",
        "type": "ui_form",
        "z": "33cf6bb92a970f36",
        "name": "",
        "label": "",
        "group": "9eebbac2f9f9aab7",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Point Name (Ex. SpaceTemp, RoomTemp, SupplyTemp)",
                "value": "bacnet.point.nameArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Instance (Ex. 1, 2, 3)",
                "value": "bacnet.point.instanceArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Type (Ex. analogValue, binaryValue, analogValue)",
                "value": "bacnet.point.typeArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Description",
                "value": "bacnet.point.descriptionArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Point Policy",
                "value": "bacnet.point.policyArray",
                "type": "multiline",
                "required": false,
                "rows": 1
            }
        ],
        "formValue": {
            "bacnet.point.nameArray": "",
            "bacnet.point.instanceArray": "",
            "bacnet.point.typeArray": "",
            "bacnet.point.descriptionArray": "",
            "bacnet.point.policyArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 70,
        "y": 60,
        "wires": [
            [
                "613a674a2c5dc512"
            ]
        ]
    },
    {
        "id": "1c3568852c1401d8",
        "type": "ui_form",
        "z": "33cf6bb92a970f36",
        "name": "",
        "label": "Devices",
        "group": "fd884cfe4217ef4c",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Start",
                "value": "bacnet.startArray",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Finish",
                "value": "bacnet.finishArray",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "bacnet.startArray": "",
            "bacnet.finishArray": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 80,
        "y": 100,
        "wires": [
            [
                "09d0b81edb018773"
            ]
        ]
    },
    {
        "id": "b9be5f0f216058da",
        "type": "ui_table",
        "z": "33cf6bb92a970f36",
        "group": "d66e38329ea74f08",
        "name": "BACNet Points Table",
        "order": 2,
        "width": 26,
        "height": 10,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1180,
        "y": 80,
        "wires": []
    },
    {
        "id": "cd7424b3bff7ad5d",
        "type": "link out",
        "z": "33cf6bb92a970f36",
        "name": "Global Points Data",
        "mode": "link",
        "links": [
            "f587a33905211532"
        ],
        "x": 1265,
        "y": 140,
        "wires": []
    },
    {
        "id": "0a855768ccaf85c3",
        "type": "link out",
        "z": "33cf6bb92a970f36",
        "name": "Global Device Point Data",
        "mode": "link",
        "links": [
            "fdaca98950b8c303"
        ],
        "x": 595,
        "y": 100,
        "wires": []
    }
]